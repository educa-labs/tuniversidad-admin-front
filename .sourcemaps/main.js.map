{"version":3,"sources":["../../src/providers/data-carreras/data-carreras.ts","../../src/providers/data-areas/data-areas.ts","../../node_modules/@angular/core/@angular lazy","../../src lazy","../../src/pages/login/login.ts","../../src/pages/home/home.ts","../../src/providers/auth/auth.ts","../../src/pages/universidades/universidades.ts","../../src/pages/detalle-universidad/detalle-universidad.ts","../../src/pages/detalle-carrera/detalle-carrera.ts","../../src/pages/detalle-campus/detalle-campus.ts","../../src/pages/agregar-carrera/agregar-carrera.ts","../../src/pages/agregar-campus/agregar-campus.ts","../../src/pages/agregar-universidad/agregar-universidad.ts","../../src/pages/news-list/news-list.ts","../../src/providers/data-usuarios/data-usuarios.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/app/app.component.ts","../../src/pages/usuarios/usuarios.ts","../../src/pages/news-create/news-create.ts","../../src/providers/news/news.ts","../../src/providers/campus/campus.ts","../../src/providers/data-universidades/data-universidades.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { LoadingController } from 'ionic-angular';\n\n@Injectable()\nexport class DataCarrerasProvider {\n    /* DataCarrerasProvider: provider de la información de las carreras.\n    Tiene todas las funciones necesarias para manejar la info */\n\n    // Url de la API\n    api: string = 'http://localhost:3000';\n\n    constructor(public http: Http, public loading: LoadingController) {}\n\n    get_detalle_carrera(id_carrera, token) {\n        /* get_detalle_carrera: funcion para recibir la informacion detallada de una\n        carrera. Recibe el token y el id de la universidad a consultar */\n\n        // Crear loader\n        let loader = this.loading.create({ content: 'Recibiendo detalle...' });\n        // Mostrar loader en pantalla\n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la API \n            this.http.get(this.api + '/carreers/' + id_carrera, { headers: headers })\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Informacion de la carrera', data);\n                    // Resolver promesa\n                    resolve(data);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                })\n        }) \n    };\n\n    actualizar_carrera(data_carrera, id_carrera, token) {\n        /* actualizar_carrera: funcion para actualizar la informacion de una carrera\n        lo que hace es recibir un json con toda la informacion y la manda */\n\n        let loader = this.loading.create({ content: 'Actualizando carrera...' });\n        loader.present();\n\n        return new Promise(resolve => {\n            // Headers para hacer la consulta \n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer Patch a la API\n            this.http.patch(this.api + '/carreers/' + id_carrera, JSON.stringify(data_carrera), { headers: headers })\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Data al actualizar info carrera', data);\n                    resolve(data);\n                    loader.dismiss();\n                })\n        })\n    };\n\n    agregar_carrera(data_a_enviar, token) {\n        /* agregar_carrera: funcion para agregar una carrera. Hace post a la API  */\n        let loader = this.loading.create({ content: 'Agregando carrera...' });\n        loader.present();\n\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer POST a la API \n            this.http.post(this.api + '/carreers', JSON.stringify(data_a_enviar), {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    resolve(data);\n                    loader.dismiss();\n                }, error => {\n                    alert('Ocurrió un error al intentar agregar la carrera');\n                    console.log('Ocurrió un error al intentar agregar la carrera', error);\n                    loader.dismiss();\n                });\n        });\n    };\n\n    eliminar_carrera(id_carrera, token) {\n        /* eliminar_carrera: funcion para eliminar una carrera. Recibe el id de la carrera\n        y hace DELETE a la API */\n        let loader = this.loading.create({ content: 'Eliminando carrera...' });\n        loader.present();\n\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n\n            this.http.delete(this.api + '/carreers/' + id_carrera, { headers: headers })\n                .map(res => res.json())\n                .subscribe(data => {\n                    resolve(data);\n                    console.log('Data recibida al borrar una carrera', data);\n                    loader.dismiss();\n                }, error => {\n                    alert('Ocurrió un error al intentar borrar una carrera');\n                    console.log('Ocurrió un error al intentar borrar una carrera', error);\n                    loader.dismiss();\n                });\n        });\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/data-carreras/data-carreras.ts","import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { LoadingController } from 'ionic-angular';\n\n@Injectable()\nexport class DataAreasProvider {\n    /* DataAreasProvider: provider para toda la información de las areas.\n    Tiene todas las funciones necesarias para manejar la informacion */\n\n    // Url de la API \n    api: string = 'http://localhost:3000';\n    // Areas guardadas\n    areas_guardadas: any;\n\n    constructor(public http: Http, public loading: LoadingController) {}\n\n    get_areas(token) {\n        /* get_areas: funcion para recibir todas las areas. Recibe el token \n        y hace un GET a la API */\n        if (this.areas_guardadas) {\n            return Promise.resolve(this.areas_guardadas);\n        }\n        // Crear loader \n        let loader = this.loading.create({ content: 'Recibiendo detalle...' });\n        // Mostrar loader en pantalla\n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('token', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer GET a la API \n            this.http.get(this.api + '/areas', { headers: headers })\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Areas recibidas', data);\n                    // Resolver promesa\n                    resolve(data);\n                    // Desaparece loader de la pantala \n                    loader.dismiss();\n                })\n        })\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/data-areas/data-areas.ts","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 113;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/@angular lazy\n// module id = 113\n// module chunks = 0","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 155;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 155\n// module chunks = 0","import { Component } from '@angular/core';\nimport { NavController, NavParams, LoadingController, MenuController } from 'ionic-angular';\nimport { Storage } from '@ionic/storage';\n// Importar paginas\nimport { HomePage } from '../home/home';\n// Import providers\nimport { AuthProvider } from '../../providers/auth/auth';\n\n@Component({\n    selector: 'page-login',\n    templateUrl: 'login.html',\n})\n\nexport class LoginPage {\n    /* Login: pagina de login del administrador. El usuario ingresa las credenciales\n    y solo entra a la siguiente pagina si es administrador */\n\n    credenciales: any = {email: '', password: ''};\n\n    constructor(\n        public nav: NavController, \n        public navParams: NavParams,\n        public loading: LoadingController,\n        public menuCtrl: MenuController,\n        public auth: AuthProvider,\n        public storage: Storage) {\n\n            this.storage.get('user').then((val) => {\n                // Si está 'user' guardado en el storage\n                if (val != null) {\n                    // Setear el usuario actual con el valor que está guardado\n                    this.auth.setUserInfo(val);    \n                    // Convertir la pagina root en la página de inicio\n                    this.nav.setRoot(HomePage);\n                    // Habilitar el menú principal\n                    this.menuCtrl.enable(true);\n                }            \n            });\n            // Deshabilitar el menu dentro del login\n            this.menuCtrl.enable(false);\n    }\n\n     public login() {\n         /* login: funcion para hacer login dentro de la plataforma. Llama a la funcion\n         del provider auth. Si pasa el observer setea a la pagina home como root. */\n         this.auth.login(this.credenciales)\n             .subscribe(allowed => {\n                 if (allowed) {\n                     // Setear el usuario actual\n                    this.storage.set('user', this.auth.get_usuario_actual_info());\n                    console.log('Se seteo el usuario', this.storage.get('user'));\n                     // Setear la pagina de inicio como root\n                     this.nav.setRoot(HomePage);\n                     // Habilitar el menu\n                     this.menuCtrl.enable(true);\n                 }\n                 // Si no tiene acceso ese usuario\n                 else {\n                     alert('Acceso denegado');\n                 }\n             }, error => {\n                 alert(error);\n             })\n     }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\n@Component({\n  selector: 'page-home',\n  templateUrl: 'home.html'\n})\nexport class HomePage {\n\n  constructor(public navCtrl: NavController) {\n\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/home/home.ts","import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport { LoadingController } from 'ionic-angular';\n\nexport class User {\n    /* Clase de un usuario para guardar la información del suauio actual.\n    Recibe toda la información basica */\n    id: number;\n    name: string;\n    email: string;\n    token: string;\n\n    constructor(\n        id: number,\n        name: string,\n        email: string,\n        token: string,) {\n            // Setear la información del usuario actual\n            this.id = id;\n            this.name = name;\n            this.email = email;\n            this.token = token;\n    }\n}\n\n@Injectable()\nexport class AuthProvider {\n\n    api: string = 'http://localhost:3000';\n    // Usuario actual\n    usuario_actual: User;\n    // Información recibida\n    data: any;\n\n    constructor(public http: Http, public loading: LoadingController) {}\n\n    login(credenciales) {\n        /* login: recibe las credenciales. Revisa si las credenciales son no nulas y \n        si lo son hace la consulta a la API */\n        if (credenciales.email === null || credenciales.password === null) {\n            return Observable.throw('Ingresa las credenciales.');\n        } \n        // Si las credenciales son válidas\n        else {\n            return Observable.create(observer => {\n                // Crear los headers para llamar a la API\n                let headers = new Headers();\n                headers.append('Accept', 'application/tuniversidad.v1');\n                headers.append('Content-Type', 'application/json');\n                let credenciales_a_mandar = {'session': {'email': credenciales.email, 'password': credenciales.password}}\n\n                return this.http.post(this.api + '/sessions', JSON.stringify(credenciales_a_mandar), {headers: headers})\n                    .map(res => res.json())\n                    .subscribe(data => {\n                        // Crear loader\n                        let loader = this.loading.create({\n                            content: 'Cargando...'\n                        });\n                        // Mostrar loader en pantalla\n                        loader.present();\n                        // Setear el usuario actual \n                        console.log('Información recibida en el login', data);\n                        this.usuario_actual = new User(data.id, data.first_name, data.email,data.auth_token);\n                        // El observer pasa solo si el usuario ingresado es admin\n                        observer.next(data['admin']);\n                        // Desaparece loader de pantalla\n                        loader.dismiss();\n                        // Completar observer\n                        observer.complete();\n                    });\n            })\n        }\n    }\n\n    public setUserInfo(value) {\n        /* setUserInfo: Funcion para setear información del usuario\n        actual */\n        this.usuario_actual = value;\n    }\n\n    public get_usuario_actual_info() {\n        /* get_usuario_actual_info: funcion para recibir la informacion del usuario actual */\n        return this.usuario_actual\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/auth/auth.ts","import { Component } from '@angular/core';\nimport { Storage } from '@ionic/storage';\nimport { NavController, NavParams } from 'ionic-angular';\n// Importar paginas \nimport { DetalleUniversidadPage } from '../detalle-universidad/detalle-universidad';\nimport { AgregarUniversidadPage } from '../agregar-universidad/agregar-universidad'; \n// Importar providers\nimport { DataUniversidadesProvider } from '../../providers/data-universidades/data-universidades';\n\n@Component({\n    selector: 'page-universidades',\n    templateUrl: 'universidades.html',\n})\n\nexport class UniversidadesPage {\n    /* UniversidadesPage: pagina donde se muestra una lista con info basica\n    de las universidades */\n\n    universidades: any;\n    token: string\n\n    constructor(\n        public navCtrl: NavController, \n        public navParams: NavParams,\n        public provider_universidades: DataUniversidadesProvider,\n        public storage: Storage) {\n            // Extraemos token del usuario\n            this.storage.get(\"user\").then((data) => {\n                this.token = data.token\n                // Llamar a la funcion para recibir las universidades\n                this.get_universidades();\n            })\n            \n    };\n\n    get_universidades() {\n        /* get_universidades: funcion que llama a la funcion del provider para\n        recibir informacion basica de las universidades */\n        this.provider_universidades.get_todas_universidades(this.token)\n            .then(data => {\n                // Guardar la informacion de las universidades \n                this.universidades = data;\n            });\n    };\n\n    ver_universidad(id_universidad) {\n        /* ver_universidad: funcion para la navegación entre lista de universidades\n        con detalle de una universidad */\n        // Push a la pagina de detalle y le pasa la informacion\n        this.navCtrl.push(DetalleUniversidadPage,{id_universidad: id_universidad}) \n    };\n\n    agregar_universidad() {\n        // funcion para la navegación que lleva a vista de crear universidad\n        this.navCtrl.push(AgregarUniversidadPage) \n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/universidades/universidades.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams } from 'ionic-angular';\nimport { Storage } from '@ionic/storage';\nimport { AlertController } from 'ionic-angular';\n// Importar paginas\nimport { DetalleCarreraPage } from '../detalle-carrera/detalle-carrera';\nimport { DetalleCampusPage} from '../detalle-campus/detalle-campus'\nimport { AgregarCarreraPage } from '../agregar-carrera/agregar-carrera';\nimport { AgregarCampusPage } from '../agregar-campus/agregar-campus' \n// Importar providers\nimport { DataUniversidadesProvider } from '../../providers/data-universidades/data-universidades';\nimport { CampusProvider } from '../../providers/campus/campus';\n\n@Component({\n    selector: 'page-detalle-universidad',\n    templateUrl: 'detalle-universidad.html',\n})\nexport class DetalleUniversidadPage {\n    /* DetalleUniversidadPage: pagina con toda la información detallada de la \n    universidad seleccionada. Desde acá se puede editar la información de la u */\n\n    // Id de la universidad seleccionada antes\n    id_universidad_seleccionada: any;\n    // Toda la informacion de la universidad seleccionada\n    info_universidad_seleccionada: any;\n    // Las carreras de la universidad \n    carreras_universidad: any;\n    // Campuses de la universidad \n    campuses_universidad: any;\n    //tipos de universidad\n    university_types: any;\n    university_levels: any;\n    profileToUpload: File = null;\n    coverToUpload: File = null;\n\n    token: string;\n\n    constructor(\n        public navCtrl: NavController, \n        public navParams: NavParams,\n        public provider_universidades: DataUniversidadesProvider,\n        public provider_campuses: CampusProvider,\n        public alertCtrl: AlertController,\n        public storage: Storage) {\n            // Recibir el id de la universidad seleccionada\n            this.id_universidad_seleccionada = navParams.get('id_universidad');\n            this.university_levels = [{id:0, title:\"Ambas\"},{id:1, title:\"Profesional\"},{id:2,title:\"Técnica\"}];\n            this.storage.get(\"user\").then((data) => {\n                this.token = data.token\n                // Recibir toda la informacion de la universidad \n                this.recibir_informacion(this.id_universidad_seleccionada);\n                //recibir las carreras de la universidad\n                this.get_carreras(this.id_universidad_seleccionada)\n                // Recibir los campuses de la universidad \n                this.recibir_campuses(this.id_universidad_seleccionada);\n                this.load_types()\n            })\n        }\n\n    recibir_informacion(id_universidad) {\n        /* recibir_informacion: funcion para recibir toda la informacion de la \n        universidad seleccionada. Llama a la funcion del provider y guarda la info */\n\n        this.provider_universidades.get_detalle_universidad(id_universidad, this.token)\n            .then(data => {\n                // Guardar la informacion recibida\n                this.info_universidad_seleccionada = data;\n            })\n    };\n\n    //Para pedir las carreras de una universidad\n    get_carreras(id_universidad) {\n        this.provider_universidades.get_carreras_universidad(id_universidad, this.token)\n            .then(data => {\n                // Guardar la informacion recibida\n                this.carreras_universidad = data;\n\n            })\n    }\n\n    async load_types() {\n        this.university_types =  await this.provider_universidades.get_types()\n    }\n\n    ver_carrera(id_carrera) {\n        /* ver_carrera: funcion para la navegacion entre la lista de carreras de una\n        universidad y su detalle. */\n        // Navegacion y le pasa el id de la carrera a la nueva pagina \n        this.navCtrl.push(DetalleCarreraPage,{id_carrera: id_carrera});\n    };\n\n    ver_campus(id_campus) {\n        this.navCtrl.push(DetalleCampusPage, {id_campus: id_campus})\n    }\n\n\n    handleProfileInput(files: FileList) {\n        this.profileToUpload = files.item(0);\n    }\n    \n    handleCoverInput(files: FileList) {\n        this.coverToUpload = files.item(0);\n    }\n\n    async actualizar_universidad() {\n        /* actualizar_universidad: funcion para actualizar la informacion de una de \n        lcas universidades. Lo que hace es ordenar la data que se enviará y llama \n        a la funcion del provider */\n        let data_a_enviar = {\n            \"title\": this.info_universidad_seleccionada.title,\n            \"website\": this.info_universidad_seleccionada.website,\n            \"motto\": this.info_universidad_seleccionada.motto,\n            \"initials\": this.info_universidad_seleccionada.initials,\n            \"freeness\": this.info_universidad_seleccionada.freeness,\n            \"foundation\": this.info_universidad_seleccionada.foundation,\n            \"teachers\": this.info_universidad_seleccionada['teachers'],\n            \"postgraduates\": this.info_universidad_seleccionada.postgraduates,\n            \"doctorates\": this.info_universidad_seleccionada.doctorates,\n            \"description\": this.info_universidad_seleccionada.description,\n            \"students\": this.info_universidad_seleccionada.students,\n            \"degrees\": this.info_universidad_seleccionada.degrees,\n            \"visits\": this.info_universidad_seleccionada.visits,\n            \"university_type_id\": this.info_universidad_seleccionada.university_type_id,\n            \"level\": this.info_universidad_seleccionada.level\n        };\n\n\n        if (this.profileToUpload) {\n            const data = await this.readUploadedFileAsData(this.profileToUpload)\n            const result =JSON.stringify(data).slice(1,-1)\n            data_a_enviar['profile'] = result.split('base64,').pop();\n            data_a_enviar['profile_extension'] = this.profileToUpload.name.split('.').pop()\n          }\n          if (this.coverToUpload) {\n            const data = await this.readUploadedFileAsData(this.coverToUpload)\n            const result =JSON.stringify(data).slice(1,-1)\n            data_a_enviar['cover'] = result.split('base64,').pop();\n            data_a_enviar['cover_extension'] = this.coverToUpload.name.split('.').pop()\n          }\n\n\n        console.log('Data a enviar', data_a_enviar);\n        this.provider_universidades.actualizar_universidad(data_a_enviar, this.id_universidad_seleccionada, this.token)\n            .then(data => {\n                console.log('Respuesta al actualizar', data);\n            })\n    };\n\n\n    readUploadedFileAsData = (file) => {\n        const reader:FileReader = new FileReader();\n    \n        return new Promise((resolve,reject) => {\n          reader.onloadend = (e) => {\n            resolve(reader.result)\n          }\n          reader.readAsDataURL(file);    \n          }\n        )\n      };\n\n    recibir_campuses(id_universidad) {\n        /* recibir_campuses: funcion para recibir todos los campuses de una universidad,\n        Recibe el id de la universidad actual y consulta a la funcion del provider */\n        this.provider_campuses.get_campuses_universidad(this.token, id_universidad)\n            .then(data => {\n                this.campuses_universidad = data;\n                \n            });\n    };\n\n    agregar_carrera() {\n        /* agregar_carrera: funcion para la navegacion entre el detalle de una universidad \n        y la pagina para agregar carreas */\n        // Push a la pagina para agregar carreras. Le pasa el id de la universidad \n        this.navCtrl.push(AgregarCarreraPage, {\n            id_universidad: this.id_universidad_seleccionada\n        });\n    };\n\n    agregar_campus() {\n        this.navCtrl.push(AgregarCampusPage, {\n            id_universidad: this.id_universidad_seleccionada\n        });\n    }\n\n    destroy_universidad(id_universidad) {\n        let confirm = this.alertCtrl.create({\n            title: 'Confirmar eliminar universidad',\n            message: '¿Seguro quieres borras esta universidad? No hay vuelta atrás...',\n            buttons: [\n                {\n                    text: 'Cancelar',\n                    handler: () => {\n                        console.log('Se apretó cancelar');\n                    }\n                },\n                {\n                    text: 'Aceptar',\n                    handler: () => {\n                        console.log('Se apretó para que se borrara una universidad');\n                        // Llamar a la funcion del provider \n                        this.provider_universidades.delete_universidad(this.id_universidad_seleccionada, this.token)\n                            .then(data => {\n                                if (data['status'] == 'success') {\n                                    this.navCtrl.pop();\n                                } else {\n                                    alert('Ocurrió un error intentando borrar la universidad')\n                                }\n                            })\n                     }\n                }\n            ]\n        });\n        // Mostrar alert de confirmacion\n        confirm.present();\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/detalle-universidad/detalle-universidad.ts","import { Component } from '@angular/core';\nimport { Storage } from '@ionic/storage';\nimport { NavController, NavParams } from 'ionic-angular';\nimport { AlertController } from 'ionic-angular';\n// Importar providers\nimport { DataCarrerasProvider } from '../../providers/data-carreras/data-carreras';\nimport { DataAreasProvider } from '../../providers/data-areas/data-areas';\n\n@Component({\n    selector: 'page-detalle-carrera',\n    templateUrl: 'detalle-carrera.html',\n})\n\nexport class DetalleCarreraPage {\n    /* DetalleCarreraPage: pagina donde se ve toda la informacion de una \n    carrera en una universidad. Desde acá se puede editar la informacion */\n\n    id_carrera_seleccionada: any;\n    // Toda la informacion de la carrera \n    info_carrera: any;\n    areas: any;\n    area_nueva: any;\n    token: string;\n    degree_types: any;\n\n    constructor(\n        public navCtrl: NavController, \n        public navParams: NavParams,\n        public provider_carreras: DataCarrerasProvider,\n        public provider_areas: DataAreasProvider,\n        public alertCtrl: AlertController,\n        public storage: Storage) {\n            // Recibir el id de la carrera seleccionada \n            this.degree_types = [{id:1, title:\"Profesional\"},{id:2,title:\"Técnica\"}];\n            this.id_carrera_seleccionada = navParams.get('id_carrera');\n            this.storage.get(\"user\").then((data) => {\n                this.token = data.token\n                // Recibir toda la informacion de la carrera\n                this.recibir_informacion(this.id_carrera_seleccionada);\n                // Recibir las areas \n                this.recibir_areas();\n            })\n    };\n\n    recibir_informacion(id_carrera) {\n        /* recibir_informacion: funcion para recibir toda la informacion de la\n        carrera seleccionada. Llama a la funcion del provider y guarda la info */\n\n        this.provider_carreras.get_detalle_carrera(id_carrera, this.token)\n            .then(data => {\n                // Guardar la informacion recibida\n                this.info_carrera = data;\n            })\n    };\n\n    actualizar_carrera() {\n        /* actualizar_carrera: funcion para actualizar la informacion de una de\n        las carreras. Lo que hace es ordenar la data que se enviará y llama a la\n        funcion del provider pasandole la informacion */\n\n        let data_a_enviar = {\n            'area_id': this.info_carrera['area_id'],\n            'title': this.info_carrera['title'],\n            'visits': this.info_carrera['visits'],\n            'semesters': this.info_carrera['semesters'],\n            'price': this.info_carrera['price'],\n            'schedule': this.info_carrera['schedule'],\n            'openings': this.info_carrera['openings'],\n            'employability': this.info_carrera['employability'],\n            'income': this.info_carrera['income'],\n            'last_cut': this.info_carrera['last_cut'],\n            'description': this.info_carrera['description'],\n            'degree_type': this.info_carrera['degree_type'],\n            'demre_id': this.info_carrera['demre_id'],\n            weighing: {\n                'NEM': this.info_carrera.weighing['NEM'],\n                'ranking': this.info_carrera.weighing['ranking'],\n                'language': this.info_carrera.weighing['language'],\n                'math': this.info_carrera.weighing['math'],\n                'science': this.info_carrera.weighing['science'],\n                'history': this.info_carrera.weighing['history']\n            }\n        };\n        // Imprimir la info que se enviará a la funcion para actualizar\n        console.log('Data actualizar carrera', data_a_enviar);\n\n        this.provider_carreras.actualizar_carrera(data_a_enviar, this.id_carrera_seleccionada, this.token)\n            .then(data => {\n                console.log('Respuesta al actualizar', data);\n            })\n    };\n\n    recibir_areas() {\n        /* recibir_areas: funcion para recibir todas las areas. Llama a la funcion\n        del provider y le manda el token */\n\n        this.provider_areas.get_areas(this.token)\n            .then(data => {\n                // Guardar las areas \n                this.areas = data;\n            })\n    };\n\n    borrar_carrera() {\n        /* borrar_carerra: funcion para borrar la carrera. Primero muestra un alert de \n        confirmacion. Si se acepta se llama a funcion del provider. Si se cancela se\n        borra el alert */\n\n        let confirm = this.alertCtrl.create({\n            title: 'Confirmar eliminar carrera',\n            message: '¿Seguro quieres borras esta carrera? No hay vuelta atrás...',\n            buttons: [\n                {\n                    text: 'Cancelar',\n                    handler: () => {\n                        console.log('Se apretó cancelar');\n                    }\n                },\n                {\n                    text: 'Aceptar',\n                    handler: () => {\n                        console.log('Se apretó para que se borrara una carrera');\n                        // Llamar a la funcion del provider \n                        this.provider_carreras.eliminar_carrera(this.id_carrera_seleccionada, this.token)\n                            .then(data => {\n                                if (data['status'] == 'success') {\n                                    this.navCtrl.pop();\n                                } else {\n                                    alert('Ocurrió un error intentando borrar la carrera')\n                                }\n                            })\n                     }\n                }\n            ]\n        });\n        // Mostrar alert de confirmacion\n        confirm.present();\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/detalle-carrera/detalle-carrera.ts","import { Component } from '@angular/core';\nimport { Storage } from '@ionic/storage';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { AlertController } from 'ionic-angular';\nimport { CampusProvider } from '../../providers/campus/campus'\nimport { DataUniversidadesProvider } from '../../providers/data-universidades/data-universidades'\n\n\n@Component({\n  selector: 'page-detalle-campus',\n  templateUrl: 'detalle-campus.html',\n})\nexport class DetalleCampusPage {\n\n  id_campus: any;\n  token: string;\n  info_campus: any;\n  ciudades: any;\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public provider_campus: CampusProvider,\n    public alertCtrl: AlertController,\n    public storage: Storage) {\n      this.load_cities()\n      this.id_campus = navParams.get('id_campus');\n      this.storage.get(\"user\").then((data) => {\n        this.token = data.token\n      })\n      // recibir información del campus\n      this.load_campus(this.id_campus)\n  }\n\n  load_campus(id_campus) {\n    this.provider_campus.get_campus(id_campus).then( data => {\n      this.info_campus = data;\n    })\n\n  }\n\n  load_cities() {\n    this.provider_campus.get_cities().then(data => {\n      this.ciudades = data\n    })\n  }\n\n  actualizar_campus(id_campus) {\n    let data_a_enviar = {\n      \"title\": this.info_campus.title,\n      \"lat\": this.info_campus.lat,\n      \"long\": this.info_campus.long,\n      \"address\": this.info_campus.address,\n      \"city_id\": this.info_campus.city_id\n  };\n\n  console.log('Data a enviar', data_a_enviar);\n  this.provider_campus.update_campus(data_a_enviar, this.id_campus, this.token)\n      .then(data => {\n          console.log('Respuesta al actualizar', data);\n      })\n  }\n\n  destroy_campus() {\n    /* borrar_campus: funcion para borrar la campus. Primero muestra un alert de \n    confirmacion. Si se acepta se llama a funcion del provider. Si se cancela se\n    borra el alert */\n\n    let confirm = this.alertCtrl.create({\n        title: 'Confirmar eliminar campus',\n        message: '¿Seguro quieres borras este campus? No hay vuelta atrás...',\n        buttons: [\n            {\n                text: 'Cancelar',\n                handler: () => {\n                    console.log('Se apretó cancelar');\n                }\n            },\n            {\n                text: 'Aceptar',\n                handler: () => {\n                    console.log('Se apretó para que se borrara el campus');\n                    // Llamar a la funcion del provider \n                    this.provider_campus.delete_campus(this.id_campus, this.token)\n                        .then(data => {\n                            if (data['status'] == 'success') {\n                                this.navCtrl.pop();\n                            } else {\n                                alert('Ocurrió un error intentando borrar el campus')\n                            }\n                        })\n                 }\n            }\n        ]\n    });\n    // Mostrar alert de confirmacion\n    confirm.present();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/detalle-campus/detalle-campus.ts","import { Component } from '@angular/core';\nimport { Storage } from '@ionic/storage';\nimport { NavController, NavParams } from 'ionic-angular';\n// Importar providers   \nimport { CampusProvider } from '../../providers/campus/campus';\nimport { DataAreasProvider } from '../../providers/data-areas/data-areas';\nimport { DataCarrerasProvider } from '../../providers/data-carreras/data-carreras';\n\n@Component({\n    selector: 'page-agregar-carrera',\n    templateUrl: 'agregar-carrera.html',\n})\nexport class AgregarCarreraPage {\n    /* AgregarCarreraPage: pagina para agregar una carrera a una \n    universidad en especifico. Recibe por navegacion el id de la universidad\n    y lo guarda. */\n\n    id_universidad: any;\n    info_carrera_nueva: any;\n    campuses_universidad: any;\n    areas:any;\n    token:string;\n    degree_types: any;\n\n    constructor(\n        public navCtrl: NavController, \n        public navParams: NavParams,\n        public provider_campuses: CampusProvider,\n        public provider_areas: DataAreasProvider,\n        public provider_carreras: DataCarrerasProvider,\n        public storage: Storage) {\n            this.degree_types = [{id:1, title:\"Profesional\"},{id:2,title:\"Técnica\"}];\n            this.storage.get(\"user\").then((data) => {\n                this.token = data.token\n                // Recibir las areas \n                this.recibir_areas();\n                // Recibir el id de la universidad\n                this.id_universidad = navParams.get('id_universidad');\n                // Recibir los campuses de la universidad\n                this.recibir_campuses(this.id_universidad);\n                // Setear la info de la nueva carrera\n                this.info_carrera_nueva = {'university_id': this.id_universidad, 'weighing':{}};\n            })\n    };\n\n    agregar_carrera() {\n        /* agregar_carrera: funcion para enviar toda la informacion a agregar\n        a la funcion del provider. Ordena toda la informacion que se enviará\n        y llama a la función. */\n\n        console.log('Data a enviar para agregar', this.info_carrera_nueva);\n        this.provider_carreras.agregar_carrera(this.info_carrera_nueva, this.token)\n            .then(data => {\n                console.log('Respuesta del servidor al agregar carrera', data);\n                if (data) {\n                    this.navCtrl.pop();\n                };\n            });\n    };\n\n    recibir_areas() {\n        /* recibir_areas:funcion funcion para recibir las areas. Llama a la funcion \n        del provider de las areas */\n\n        this.provider_areas.get_areas(this.token)\n            .then(data => {\n                // Guardar las areas \n                this.areas = data;\n            });\n    };\n\n    recibir_campuses(id_universidad) {\n        /* recibir_campuses: funcion para recibir la lista con todos los campuses\n        de la universidad. Recibe el id de la universidad y llama a la funcion del provider */\n\n        this.provider_campuses.get_campuses_universidad(this.token, id_universidad)\n            .then(data => {\n                this.campuses_universidad = data;\n            });\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/agregar-carrera/agregar-carrera.ts","import { Component } from '@angular/core';\nimport { Storage } from '@ionic/storage';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { CampusProvider } from '../../providers/campus/campus'\nimport { DataUniversidadesProvider } from '../../providers/data-universidades/data-universidades'\n\n@Component({\n  selector: 'page-agregar-campus',\n  templateUrl: 'agregar-campus.html',\n})\nexport class AgregarCampusPage {\n\n  token: string;\n  info_campus: any;\n  ciudades: any;\n  id_universidad: any;\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public provider_campus: CampusProvider,\n    public storage: Storage) {\n      \n      this.load_cities()\n      this.id_universidad = navParams.get('id_universidad');\n      this.storage.get(\"user\").then((data) => {\n        this.token = data.token\n      })\n      this.info_campus = {}\n    }\n\n    load_cities() {\n      this.provider_campus.get_cities().then(data => {\n        this.ciudades = data\n      })\n    }\n\n  create_campus() {\n    let data_a_enviar = {\n      \"title\": this.info_campus.title,\n      \"lat\": this.info_campus.lat,\n      \"long\": this.info_campus.long,\n      \"address\": this.info_campus.address,\n      \"city_id\": this.info_campus.city_id,\n      \"university_id\": this.id_universidad\n    };\n\n  console.log('Data a enviar', data_a_enviar);\n\n  this.provider_campus.post_campus(data_a_enviar, this.token)\n      .then(data => {\n          console.log('Respuesta al crear', data);\n      })\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/agregar-campus/agregar-campus.ts","import { Component } from '@angular/core';\nimport { Storage } from '@ionic/storage';\nimport { NavController, NavParams } from 'ionic-angular';\nimport { DataUniversidadesProvider } from '../../providers/data-universidades/data-universidades'\nimport { resolve, reject } from 'q';\n\n\n@Component({\n  selector: 'page-agregar-universidad',\n  templateUrl: 'agregar-universidad.html',\n})\nexport class AgregarUniversidadPage {\n\n  info_universidad_agregar: object;\n  token:string;\n  university_types: any;\n  university_levels: any;\n  profileToUpload: File = null;\n  coverToUpload: File = null;\n\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public provider_universidades: DataUniversidadesProvider,\n    public storage: Storage) {\n      this.info_universidad_agregar = {};\n      this.university_levels = [{id:0, title:\"Ambas\"},{id:1, title:\"Profesional\"},{id:2,title:\"Técnica\"}];\n      // Extraemos token del usuario\n      this.storage.get(\"user\").then((data) => {\n        this.token = data.token\n        this.load_types()\n    })\n  }\n\n  async load_types() {\n    this.university_types =  await this.provider_universidades.get_types()\n  }\n\n  handleProfileInput(files: FileList) {\n    this.profileToUpload = files.item(0);\n  }\n  handleCoverInput(files: FileList) {\n    this.coverToUpload = files.item(0);\n  }\n\n  async agregar_universidad() {\n    /* crear_universidad: funcion para crear la informacion de una de \n    lcas universidades. Lo que hace es ordenar la data que se enviará y llama \n    a la funcion del provider */\n    let data_a_enviar = {\n        \"title\": this.info_universidad_agregar['title'],\n        \"website\": this.info_universidad_agregar['website'],\n        \"motto\": this.info_universidad_agregar['motto'],\n        \"initials\": this.info_universidad_agregar['initials'],\n        \"freeness\": this.info_universidad_agregar['freeness'],\n        \"foundation\": this.info_universidad_agregar['foundation'],\n        \"postgraduates\": this.info_universidad_agregar['postgraduates'],\n        \"doctorates\": this.info_universidad_agregar['doctorates'],\n        \"teachers\": this.info_universidad_agregar['teachers'],\n        \"description\": this.info_universidad_agregar['description'],\n        \"students\": this.info_universidad_agregar['students'],\n        \"degrees\": this.info_universidad_agregar['degrees'],\n        \"university_type_id\": this.info_universidad_agregar['university_type_id'],\n        \"level\": this.info_universidad_agregar['level']\n    };\n\n    if (this.profileToUpload) {\n      const data = await this.readUploadedFileAsData(this.profileToUpload)\n      const result =JSON.stringify(data).slice(1,-1)\n      data_a_enviar['profile'] = result.split('base64,').pop();\n      data_a_enviar['profile_extension'] = this.profileToUpload.name.split('.').pop()\n    }\n    if (this.coverToUpload) {\n      const data = await this.readUploadedFileAsData(this.coverToUpload)\n      const result =JSON.stringify(data).slice(1,-1)\n      data_a_enviar['cover'] = result.split('base64,').pop();\n      data_a_enviar['cover_extension'] = this.coverToUpload.name.split('.').pop()\n    }\n    \n    console.log('Data a enviar', data_a_enviar);\n    this.provider_universidades.crear_universidad(data_a_enviar, this.token)\n        .then(data => {\n            console.log('Respuesta al crear', data);\n        })\n  };\n\n\n  readUploadedFileAsData = (file) => {\n    const reader:FileReader = new FileReader();\n\n    return new Promise((resolve,reject) => {\n      reader.onloadend = (e) => {\n        resolve(reader.result)\n      }\n      reader.readAsDataURL(file);    \n      }\n    )\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/agregar-universidad/agregar-universidad.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { NewsProvider } from '../../providers/news/news'\n\n\n@Component({\n  selector: 'page-news-list',\n  templateUrl: 'news-list.html',\n})\nexport class NewsListPage {\n\n  constructor(\n    public navCtrl: NavController, \n    public navParams: NavParams) {\n  }\n\n\n  // add_new(){\n  //   this.navCtrl.push()\n  // }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/news-list/news-list.ts","import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { LoadingController } from 'ionic-angular';\n\n@Injectable()\nexport class DataUsuariosProvider {\n\n    // Informacion de todos los usuarios\n    info_todos_los_usuarios: any;\n    // Url de la api\n    api: string = 'http://api.admin.tuniversidad.cl/';\n\n    constructor(public http: Http, public loading: LoadingController) {}\n\n    get_todos_los_usuarios(token) {\n        /* get_totos_los_usuarios: funcion para recibir la informacion de todos\n        los usuarios y ponerlos en una tabla. Guarda la info en una variable. */\n        if (this.info_todos_los_usuarios) {\n            return Promise.resolve(this.info_todos_los_usuarios);\n        }\n        // Crear loader \n        let loader = this.loading.create({content: 'Recibiendo información usuarios...'});\n        // Mostrar loader en pantalla\n        loader.present();\n        // Retornar una promesa y guardar la información\n        return new Promise(resolve => {\n            // Headers para la consulta\n            let headers = new Headers();\n            headers.append('token', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la API\n            this.http.get(this.api + '/users', {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    // Guardar la informacion recibida\n                    this.info_todos_los_usuarios = data;\n                    console.log('Informacion de todos los usuarios', data);\n                    // Resolver promesa\n                    resolve(this.info_todos_los_usuarios);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                });\n        }) \n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/data-usuarios/data-usuarios.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { HttpModule } from '@angular/http';\nimport { IonicStorageModule } from '@ionic/storage';\n// Importar paginas\nimport { MyApp } from './app.component';\nimport { HomePage } from '../pages/home/home';\nimport { UsuariosPage } from '../pages/usuarios/usuarios';\nimport { LoginPage } from '../pages/login/login';\nimport { UniversidadesPage } from '../pages/universidades/universidades';\nimport { NewsListPage } from '../pages/news-list/news-list'\nimport { DetalleUniversidadPage } from '../pages/detalle-universidad/detalle-universidad';\nimport { AgregarUniversidadPage } from '../pages/agregar-universidad/agregar-universidad';\nimport { DetalleCarreraPage } from '../pages/detalle-carrera/detalle-carrera';\nimport { AgregarCarreraPage } from '../pages/agregar-carrera/agregar-carrera';\nimport { DetalleCampusPage} from  '../pages/detalle-campus/detalle-campus';\nimport { AgregarCampusPage} from '../pages/agregar-campus/agregar-campus'\nimport { NewsCreatePage} from '../pages/news-create/news-create'\n// importar providers\nimport { AuthProvider } from '../providers/auth/auth';\nimport { DataUsuariosProvider } from '../providers/data-usuarios/data-usuarios';\nimport { DataUniversidadesProvider } from '../providers/data-universidades/data-universidades';\nimport { DataCarrerasProvider } from '../providers/data-carreras/data-carreras';\nimport { DataAreasProvider } from '../providers/data-areas/data-areas';\nimport { CampusProvider } from '../providers/campus/campus';\nimport { NewsProvider } from '../providers/news/news';\n\n@NgModule({\n    declarations: [\n        MyApp,\n        HomePage,\n        UsuariosPage,\n        LoginPage,\n        UniversidadesPage,\n        DetalleUniversidadPage,\n        DetalleCarreraPage,\n        AgregarCarreraPage,\n        AgregarUniversidadPage,\n        DetalleCampusPage,\n        AgregarCampusPage,\n        NewsListPage\n    ],\n    imports: [\n        BrowserModule,\n        HttpModule,\n        IonicModule.forRoot(MyApp),\n        IonicStorageModule.forRoot()\n    ],\n    bootstrap: [IonicApp],\n    entryComponents: [\n        MyApp,\n        HomePage,\n        UsuariosPage,\n        LoginPage,\n        UniversidadesPage,\n        DetalleUniversidadPage,\n        DetalleCarreraPage,\n        AgregarCarreraPage,\n        AgregarUniversidadPage,\n        DetalleCampusPage,\n        AgregarCampusPage,\n        NewsListPage,\n        NewsCreatePage\n    ],\n    providers: [\n        StatusBar,\n        SplashScreen,\n        {provide: ErrorHandler, useClass: IonicErrorHandler},\n        AuthProvider,\n        DataUsuariosProvider,\n        DataUniversidadesProvider,\n        DataCarrerasProvider,\n        DataAreasProvider,\n        CampusProvider,\n        NewsProvider,\n        NewsCreatePage\n    ]\n})\nexport class AppModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component, ViewChild } from '@angular/core';\nimport { Nav, Platform } from 'ionic-angular';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\n// Importar paginas\n\nimport { LoginPage } from '../pages/login/login';\nimport { UniversidadesPage } from '../pages/universidades/universidades';\nimport { NewsListPage} from '../pages/news-list/news-list'\n\n@Component({\n    templateUrl: 'app.html'\n})\n\nexport class MyApp {\n\n    @ViewChild(Nav) nav: Nav;\n    // Pagina Root\n    rootPage:any = LoginPage;\n    // Paginas del menu\n    paginas: any;\n    // Opciones del menu\n    opciones: any;\n\n    constructor(\n        platform: Platform, \n        statusBar: StatusBar, \n        splashScreen: SplashScreen) {\n\n            // Configurar las paginas del menu\n            this.paginas = [\n                { titulo: 'Universidades', component: UniversidadesPage, icon: 'paper' }, \n                {titulo:\"Noticias\", component:NewsListPage, icon: \"list\"}\n            ]\n            // Cuando está lista la plataforma\n            platform.ready().then(() => {\n                statusBar.styleDefault();\n                splashScreen.hide();\n            });\n    }\n\n    abrir_pagina(page) {\n        /* abrir_pagina: Al apretar un item del menu se abre una pagina. Setea la pagina\n        root a la del componente clickeado */\n        this.nav.setRoot(page.component)\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams } from 'ionic-angular';\n// Importar providers\nimport { DataUsuariosProvider } from '../../providers/data-usuarios/data-usuarios';\n\n@Component({\n    selector: 'page-usuarios',\n    templateUrl: 'usuarios.html',\n})\n\nexport class UsuariosPage {\n    /* UsuariosPage: pagina para mostrar toda la información de los usuarios. Al\n    abrir el componente se llama a la funcion del provider y carga toda la info. */\n\n    // Usuarios con Rut \n    cantidad_usuarios_con_rut: number;\n    // Usuarios sin Rut \n    cantidad_usuarios_sin_rut: number;\n    // Usuarios con metas \n    cantidad_usuarios_con_metas: number;\n    promedio_metas_por_usuarios: number;\n    // Usuarios con ensayos\n    cantidad_usuarios_con_ensayos: number;\n    promedio_ensayos_por_usuario: number;\n    // Regiones\n    region_mas_repetida:string;\n    cantidad_usuarios_region: number;\n\n    constructor(\n        public navCtrl: NavController, \n        public navParams: NavParams,\n        private provider_usuarios: DataUsuariosProvider) {\n            // Al iniciar se abre la info de los usuarios\n            this.recibir_todos_usuarios();\n    }\n\n    recibir_todos_usuarios() {\n        /* recibir_todos_usuarios: funcion para recibir la informacion basica de todos los\n        usuarios. Usa la funcion del provider y guarda lo retornado */\n\n        let token = 'fqH6AyiyhQMeqKM8MjMC';\n\n        this.provider_usuarios.get_todos_los_usuarios(token)\n            .then(data => {\n                // Guardar info de usuarios con Rut \n                this.cantidad_usuarios_con_rut = data[0][0];\n                // Guardar cantidad usuarios sin rut \n                this.cantidad_usuarios_sin_rut = data[0][1];\n                // Guardar info de las metas \n                this.cantidad_usuarios_con_metas = data[1][0];\n                this.promedio_metas_por_usuarios = data[1][1];\n                // Guardar info de ensayos\n                this.cantidad_usuarios_con_ensayos = data[2][0];\n                this.promedio_ensayos_por_usuario = data[2][1];\n                // Guardar informacion de la region mas repetida \n                this.region_mas_repetida = data[3][0];\n                this.cantidad_usuarios_region = data[3][1];\n            })\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/usuarios/usuarios.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\n\n/**\n * Generated class for the NewsCreatePage page.\n *\n * See http://ionicframework.com/docs/components/#navigation for more info\n * on Ionic pages and navigation.\n */\n\n\n@Component({\n  selector: 'page-news-create',\n  templateUrl: 'news-create.html',\n})\nexport class NewsCreatePage {\n\n  constructor(public navCtrl: NavController, public navParams: NavParams) {\n  }\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad NewsCreatePage');\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/news-create/news-create.ts","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { LoadingController } from 'ionic-angular';\n\n@Injectable()\nexport class NewsProvider {\n\n  api: string = 'http://localhost:3000';\n  \n  constructor(public http: Http, public loading: LoadingController) {\n    \n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/news/news.ts","import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { LoadingController } from 'ionic-angular';\n\n@Injectable()\nexport class CampusProvider {\n    /* campusprovider: provider con todas las funciones para controlar\n    la informacion de los campuses */\n\n    // Url de la api\n    api: string = 'http://localhost:3000';\n\n    constructor(public http: Http, public loading: LoadingController) {};\n\n    get_campuses_universidad(token, id_universidad) {\n        /* get_campuses_universidad: funcion para recibir todos los campuses\n        de la universidad que recibe */\n\n        // Crear loader \n        let loader = this.loading.create({content: 'Recibiendo universidades...'});\n        // Mostrar loader \n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('token', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la api\n            this.http.get(this.api + '/universities/' + id_universidad + '/campus', {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Informacion de los campuses recibidos', data);\n                    // Resolver promesa\n                    resolve(data);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                });\n        });\n    };\n\n    get_campus(id_campus) {\n        let loader = this.loading.create({content: 'Recibiendo campus...'});\n        // Mostrar loader \n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la api\n            this.http.get(this.api + '/campus/' + id_campus, {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Informacion del campus recibida:', data);\n                    // Resolver promesa\n                    resolve(data);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                });\n        });\n    }\n\n    update_campus(data_campus,id_campus,token) {\n        let loader = this.loading.create({ content: 'Actualizando campus...' });\n        loader.present();\n\n        return new Promise(resolve => {\n            // Headers para hacer la consulta \n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer Patch a la API\n            this.http.patch(this.api + '/campus/' + id_campus, JSON.stringify(data_campus), { headers: headers })\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Data al actualizar info campus', data);\n                    resolve(data);\n                    loader.dismiss();\n                })\n        })\n    };\n\n    get_cities() {\n        let loader = this.loading.create({content: 'Recibiendo ciudades...'});\n        // Mostrar loader \n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la api\n            this.http.get(this.api + '/cities/', {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Informacion del campus recibida:', data);\n                    // Resolver promesa\n                    resolve(data);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                });\n        });\n    }\n\n    delete_campus(id_campus, token) {\n        /* eliminar_campus: funcion para eliminar una campus. Recibe el id de la campus\n        y hace DELETE a la API */\n        let loader = this.loading.create({ content: 'Eliminando campus...' });\n        loader.present();\n\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n\n            this.http.delete(this.api + '/campus/' + id_campus, { headers: headers })\n                .map(res => res.json())\n                .subscribe(data => {\n                    resolve(data);\n                    console.log('Data recibida al borrar un campus', data);\n                    loader.dismiss();\n                }, error => {   \n                    alert('Ocurrió un error al intentar borrar una campus');\n                    console.log('Ocurrió un error al intentar borrar un campus', error);\n                    loader.dismiss();\n                });\n        });\n    };\n\n    post_campus(data_campus,token) {\n        let loader = this.loading.create({ content: 'Creando Campus...' });\n        // Mostrar loader\n       loader.present();\n       return new Promise(resolve => {\n           // Headers para hacer la consulta\n           let headers = new Headers();\n\n           headers.append('Authorization', token);\n           headers.append('Content-Type', 'application/json');\n           // Hacer post a la API\n           this.http.post(this.api + '/campus/', JSON.stringify(data_campus), { headers: headers })\n               .map(res => res.json())\n               .subscribe(data => {\n                   resolve(data);\n                   loader.dismiss();\n               })\n       })\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/campus/campus.ts","import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { LoadingController } from 'ionic-angular';\n\n@Injectable()\nexport class DataUniversidadesProvider {\n    /* DataUniversidadesProvider: provider de la información de las universidades.\n    Tiene todas las funciones necesarias para manejar la info. */\n\n    // Url de la api\n    api: string = 'http://localhost:3000';\n    // Info de todas las universidades\n    info_todas_las_universidades: any;\n    \n\n    constructor(public http: Http, public loading: LoadingController) {}\n\n    get_todas_universidades(token) {\n        /* get_todas_universidades: funcion para recibir la informacion basica de todas\n        las universidades. Guarda esta info en una variable. */\n        if (this.info_todas_las_universidades) {\n            return Promise.resolve(this.info_todas_las_universidades);\n        }\n        // Crear loader \n        let loader = this.loading.create({content: 'Recibiendo universidades...'});\n        // Mostrar loader \n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la api\n            this.http.get(this.api + '/universities', {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    // Guardar la información de las universidades \n                    this.info_todas_las_universidades = data;\n                    console.log('Informacion de las universidades', data);\n                    // Resolver promesa\n                    resolve(this.info_todas_las_universidades);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                });\n        })\n    }\n\n    get_types() {\n\n        let loader = this.loading.create({content: 'Recibiendo detalle...'});\n        // Mostrar loader en pantalla\n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la API \n            this.http.get(this.api + '/university_types/', {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Tipos de universidad', data);\n                    // Resolver promesa\n                    resolve(data);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                })\n        })\n    }\n\n    get_detalle_universidad(id_universidad, token) {\n        /* get_detalle_universidad: funcion para recibir la información detallada de una \n        universidad. Recibe un token y el id de la universidad a consultar */\n\n        // Crear loader \n        let loader = this.loading.create({content: 'Recibiendo detalle...'});\n        // Mostrar loader en pantalla\n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la API \n            this.http.get(this.api + '/universities/' + id_universidad, {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Información de la universidad', data);\n                    // Resolver promesa\n                    resolve(data);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                })\n        })\n    }\n\n    get_carreras_universidad(id_universidad,token) {\n        let loader = this.loading.create({content: 'Recibiendo carreras...'});\n        // Mostrar loader en pantalla\n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la API \n            this.http.get(this.api + '/universities/' + id_universidad + '/carreers', {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Información de las carreras', data);\n                    // Resolver promesa\n                    resolve(data);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                })\n        })\n    }\n\n    actualizar_universidad(data_universidad, id_universidad, token) {\n        /* actualizar_universidad: funcion para actualizar la informacion de una universidad\n        lo que hace es recibir un json con toda la información de la universidad y la manda */\n    \n       let loader = this.loading.create({ content: 'Actualizando universidad...' });\n       // Mostrar loader\n       loader.present();\n       return new Promise(resolve => {\n           // Headers para hacer la consulta\n           let headers = new Headers();\n           headers.append('Authorization', token);\n           headers.append('Content-Type', 'application/json');\n           // Hacer patch a la API\n           this.http.patch(this.api + '/universities/' + id_universidad, JSON.stringify(data_universidad), { headers: headers })\n               .map(res => res.json())\n               .subscribe(data => {\n                   resolve(data);\n                   loader.dismiss();\n               })\n       })\n    }\n\n    crear_universidad(data_universidad,token) {\n        let loader = this.loading.create({ content: 'Creando universidad...' });\n        // Mostrar loader\n       loader.present();\n       return new Promise(resolve => {\n           // Headers para hacer la consulta\n           let headers = new Headers();\n\n           headers.append('Authorization', token);\n           headers.append('Content-Type', 'application/json');\n           // Hacer post a la API\n           this.http.post(this.api + '/universities/', JSON.stringify(data_universidad), { headers: headers })\n               .map(res => res.json())\n               .subscribe(data => {\n                   resolve(data);\n                   loader.dismiss();\n               })\n       })\n    }\n\n    delete_universidad(id_universidad,token) {\n        let loader = this.loading.create({ content: 'Eliminando carrera...' });\n        loader.present();\n\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n\n            this.http.delete(this.api + '/universities/' + id_universidad, { headers: headers })\n                .map(res => res.json())\n                .subscribe(data => {\n                    resolve(data);\n                    console.log('Data recibida al borrar una universidad', data);\n                    loader.dismiss();\n                }, error => {\n                    alert('Ocurrió un error al intentar borrar una universidad');\n                    console.log('Ocurrió un error al intentar borrar una universidad', error);\n                    loader.dismiss();\n                });\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/data-universidades/data-universidades.ts"],"sourceRoot":""}