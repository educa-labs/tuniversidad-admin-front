{"version":3,"sources":["../../src/providers/data-carreras/data-carreras.ts","../../src/providers/data-areas/data-areas.ts","../../src/providers/campus/campus.ts","../../node_modules/@angular/core/@angular lazy","../../src lazy","../../src/pages/login/login.ts","../../src/pages/home/home.ts","../../src/providers/auth/auth.ts","../../src/pages/universidades/universidades.ts","../../src/pages/detalle-universidad/detalle-universidad.ts","../../src/pages/detalle-carrera/detalle-carrera.ts","../../src/pages/agregar-carrera/agregar-carrera.ts","../../src/pages/agregar-universidad/agregar-universidad.ts","../../src/providers/data-usuarios/data-usuarios.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/app/app.component.ts","../../src/pages/usuarios/usuarios.ts","../../src/providers/data-universidades/data-universidades.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAA2C;AACG;AACf;AACmB;AAGlD,IAAa,oBAAoB;IAO7B,8BAAmB,IAAU,EAAS,OAA0B;QAA7C,SAAI,GAAJ,IAAI,CAAM;QAAS,YAAO,GAAP,OAAO,CAAmB;QANhE;oEAC4D;QAE5D,gBAAgB;QAChB,QAAG,GAAW,uBAAuB,CAAC;IAE6B,CAAC;IAEpE,kDAAmB,GAAnB,UAAoB,UAAU,EAAE,KAAK;QACjC;yEACiE;QAFrE,iBAwBC;QApBG,eAAe;QACf,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC;QACvE,6BAA6B;QAC7B,MAAM,CAAC,OAAO,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,OAAO,CAAC,iBAAO;YACtB,iCAAiC;YACjC,IAAI,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YACvC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YACnD,sBAAsB;YACtB,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAI,CAAC,GAAG,GAAG,YAAY,GAAG,UAAU,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;iBACpE,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,cAAI;gBACX,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,IAAI,CAAC,CAAC;gBAC/C,mBAAmB;gBACnB,OAAO,CAAC,IAAI,CAAC,CAAC;gBACd,mCAAmC;gBACnC,MAAM,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC;QACV,CAAC,CAAC;IACN,CAAC;IAAA,CAAC;IAEF,iDAAkB,GAAlB,UAAmB,YAAY,EAAE,UAAU,EAAE,KAAK;QAC9C;4EACoE;QAFxE,iBAqBC;QAjBG,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,yBAAyB,EAAE,CAAC,CAAC;QACzE,MAAM,CAAC,OAAO,EAAE,CAAC;QAEjB,MAAM,CAAC,IAAI,OAAO,CAAC,iBAAO;YACtB,kCAAkC;YAClC,IAAI,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YACvC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YACnD,uBAAuB;YACvB,KAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAI,CAAC,GAAG,GAAG,YAAY,GAAG,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;iBACpG,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,cAAI;gBACX,OAAO,CAAC,GAAG,CAAC,iCAAiC,EAAE,IAAI,CAAC,CAAC;gBACrD,OAAO,CAAC,IAAI,CAAC,CAAC;gBACd,MAAM,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC;QACV,CAAC,CAAC;IACN,CAAC;IAAA,CAAC;IAEF,8CAAe,GAAf,UAAgB,aAAa,EAAE,KAAK;QAApC,iBAsBC;QArBG,4EAA4E;QAC5E,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC,CAAC;QACtE,MAAM,CAAC,OAAO,EAAE,CAAC;QAEjB,MAAM,CAAC,IAAI,OAAO,CAAC,iBAAO;YACtB,iCAAiC;YACjC,IAAI,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YACvC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YACnD,uBAAuB;YACvB,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,GAAG,GAAG,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;iBACpF,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,cAAI;gBACX,OAAO,CAAC,IAAI,CAAC,CAAC;gBACd,MAAM,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,EAAE,eAAK;gBACJ,KAAK,CAAC,iDAAiD,CAAC,CAAC;gBACzD,OAAO,CAAC,GAAG,CAAC,iDAAiD,EAAE,KAAK,CAAC,CAAC;gBACtE,MAAM,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IAEF,+CAAgB,GAAhB,UAAiB,UAAU,EAAE,KAAK;QAAlC,iBAwBC;QAvBG;iCACyB;QACzB,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC;QACvE,MAAM,CAAC,OAAO,EAAE,CAAC;QAEjB,MAAM,CAAC,IAAI,OAAO,CAAC,iBAAO;YACtB,iCAAiC;YACjC,IAAI,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YACvC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YAEnD,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAI,CAAC,GAAG,GAAG,YAAY,GAAG,UAAU,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;iBACvE,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,cAAI;gBACX,OAAO,CAAC,IAAI,CAAC,CAAC;gBACd,OAAO,CAAC,GAAG,CAAC,qCAAqC,EAAE,IAAI,CAAC,CAAC;gBACzD,MAAM,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,EAAE,eAAK;gBACJ,KAAK,CAAC,iDAAiD,CAAC,CAAC;gBACzD,OAAO,CAAC,GAAG,CAAC,iDAAiD,EAAE,KAAK,CAAC,CAAC;gBACtE,MAAM,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,2BAAC;AAAD,CAAC;AA3GY,oBAAoB;IADhC,yEAAU,EAAE;qCAQgB,2DAAI,EAAkB,wEAAiB;GAPvD,oBAAoB,CA2GhC;AA3GgC;;;;;;;;;;;;;;;;;;;;;;;;ACNU;AACG;AACf;AACmB;AAGlD,IAAa,iBAAiB;IAS1B,2BAAmB,IAAU,EAAS,OAA0B;QAA7C,SAAI,GAAJ,IAAI,CAAM;QAAS,YAAO,GAAP,OAAO,CAAmB;QARhE;2EACmE;QAEnE,iBAAiB;QACjB,QAAG,GAAW,uBAAuB,CAAC;IAI6B,CAAC;IAEpE,qCAAS,GAAT,UAAU,KAAK;QAAf,iBA0BC;QAzBG;iCACyB;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACjD,CAAC;QACD,gBAAgB;QAChB,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC;QACvE,6BAA6B;QAC7B,MAAM,CAAC,OAAO,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,OAAO,CAAC,iBAAO;YACtB,iCAAiC;YACjC,IAAI,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC/B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YACnD,sBAAsB;YACtB,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAI,CAAC,GAAG,GAAG,QAAQ,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;iBACnD,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,cAAI;gBACX,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;gBACrC,mBAAmB;gBACnB,OAAO,CAAC,IAAI,CAAC,CAAC;gBACd,mCAAmC;gBACnC,MAAM,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC;QACV,CAAC,CAAC;IACN,CAAC;IACL,wBAAC;AAAD,CAAC;AAtCY,iBAAiB;IAD7B,yEAAU,EAAE;qCAUgB,2DAAI,EAAkB,wEAAiB;GATvD,iBAAiB,CAsC7B;AAtC6B;;;;;;;;;;;;;;;;;;;;;;;;ACNa;AACG;AACf;AACmB;AAGlD,IAAa,cAAc;IAOvB,wBAAmB,IAAU,EAAS,OAA0B;QAA7C,SAAI,GAAJ,IAAI,CAAM;QAAS,YAAO,GAAP,OAAO,CAAmB;QANhE;yCACiC;QAEjC,gBAAgB;QAChB,QAAG,GAAW,uBAAuB,CAAC;IAE6B,CAAC;IAAA,CAAC;IAErE,iDAAwB,GAAxB,UAAyB,KAAK,EAAE,cAAc;QAC1C;uCAC+B;QAFnC,iBAwBC;QApBG,gBAAgB;QAChB,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,6BAA6B,EAAC,CAAC,CAAC;QAC3E,kBAAkB;QAClB,MAAM,CAAC,OAAO,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,OAAO,CAAC,iBAAO;YACtB,iCAAiC;YACjC,IAAI,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC/B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YACnD,qBAAqB;YACrB,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAI,CAAC,GAAG,GAAG,gBAAgB,GAAG,cAAc,GAAG,SAAS,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;iBACtF,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,cAAI;gBACX,OAAO,CAAC,GAAG,CAAC,uCAAuC,EAAE,IAAI,CAAC,CAAC;gBAC3D,mBAAmB;gBACnB,OAAO,CAAC,IAAI,CAAC,CAAC;gBACd,mCAAmC;gBACnC,MAAM,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IAEN,qBAAC;AAAD,CAAC;AAnCY,cAAc;IAD1B,yEAAU,EAAE;qCAQgB,2DAAI,EAAkB,wEAAiB;GAPvD,cAAc,CAmC1B;AAnC0B;;;;;;;;ACN3B;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,kC;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,kC;;;;;;;;;;;;;;;;;;;;;;;ACV0C;AACkD;AACnD;AACzC,mBAAmB;AACqB;AACxC,mBAAmB;AACsC;AAOzD,IAAa,SAAS;IAMlB,mBACW,GAAkB,EAClB,SAAoB,EACpB,OAA0B,EAC1B,QAAwB,EACxB,IAAkB,EAClB,OAAgB;QAN3B,iBAqBC;QApBU,QAAG,GAAH,GAAG,CAAe;QAClB,cAAS,GAAT,SAAS,CAAW;QACpB,YAAO,GAAP,OAAO,CAAmB;QAC1B,aAAQ,GAAR,QAAQ,CAAgB;QACxB,SAAI,GAAJ,IAAI,CAAc;QAClB,YAAO,GAAP,OAAO,CAAS;QAX3B;iEACyD;QAEzD,iBAAY,GAAQ,EAAC,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAC,CAAC;QAUtC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG;YAC9B,wCAAwC;YACxC,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;gBACd,0DAA0D;gBAC1D,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gBAC3B,kDAAkD;gBAClD,KAAI,CAAC,GAAG,CAAC,OAAO,CAAC,4DAAQ,CAAC,CAAC;gBAC3B,8BAA8B;gBAC9B,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC/B,CAAC;QACL,CAAC,CAAC,CAAC;QACH,wCAAwC;QACxC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAEO,yBAAK,GAAZ;QAAA,iBAqBC;QApBG;mFAC2E;QAC3E,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC;aAC7B,SAAS,CAAC,iBAAO;YACd,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACV,2BAA2B;gBAC5B,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,KAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC;gBAC9D,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC5D,uCAAuC;gBACvC,KAAI,CAAC,GAAG,CAAC,OAAO,CAAC,4DAAQ,CAAC,CAAC;gBAC3B,oBAAoB;gBACpB,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC/B,CAAC;YAED,IAAI,CAAC,CAAC;gBACF,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAC7B,CAAC;QACL,CAAC,EAAE,eAAK;YACJ,KAAK,CAAC,KAAK,CAAC,CAAC;QACjB,CAAC,CAAC;IACV,CAAC;IAEN,gBAAC;AAAD,CAAC;AApDY,SAAS;IALrB,wEAAS,CAAC;QACP,QAAQ,EAAE,YAAY;OACG;KAC5B,CAAC;yEAS+B;QACP,wEAAS;QACX,sEAAiB;QAChB,2EAAc;QAClB,iEAAY;QACT,MAAO;AAwC9B;SApDY,SAAS,e;;;;;;;;;;;;;;;;;;;;ACboB;AACI;AAM9C,IAAa,QAAQ;IAEnB,kBAAmB,OAAsB;QAAtB,YAAO,GAAP,OAAO,CAAe;IAEzC,CAAC;IAEH,eAAC;AAAD,CAAC;AANY,QAAQ;IAJpB,wEAAS,CAAC;QACT,QAAQ,EAAE,WAAW;OACG;KACzB,CAAC;aAGyC;AAI1C;SANY,QAAQ,e;;;;;;;;;;;;;;;;;;;;;;;;;;ACPsB;AACG;AACD;AACd;AACmB;AAElD;IAOI,cACI,EAAU,EACV,IAAY,EACZ,KAAa;QACT,2CAA2C;QAC3C,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,CAAC;IACL,WAAC;AAAD,CAAC;;AAGD,IAAa,YAAY;IAQrB,sBAAmB,IAAU,EAAS,OAA0B;QAA7C,SAAI,GAAJ,IAAI,CAAM;QAAS,YAAO,GAAP,OAAO,CAAmB;QANhE,QAAG,GAAW,uBAAuB,CAAC;IAM6B,CAAC;IAEpE,4BAAK,GAAL,UAAM,YAAY;QAAlB,iBAoCC;QAnCG;8CACsC;QACtC,EAAE,CAAC,CAAC,YAAY,CAAC,KAAK,KAAK,IAAI,IAAI,YAAY,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC;YAChE,MAAM,CAAC,2DAAU,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QACzD,CAAC;QAED,IAAI,CAAC,CAAC;YACF,MAAM,CAAC,2DAAU,CAAC,MAAM,CAAC,kBAAQ;gBAC7B,yCAAyC;gBACzC,IAAI,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;gBAC5B,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC;gBACxD,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;gBACnD,IAAI,qBAAqB,GAAG,EAAC,SAAS,EAAE,EAAC,OAAO,EAAE,YAAY,CAAC,KAAK,EAAE,UAAU,EAAE,YAAY,CAAC,QAAQ,EAAC,EAAC;gBAEzG,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,GAAG,GAAG,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;qBACnG,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;qBACtB,SAAS,CAAC,cAAI;oBACX,eAAe;oBACf,IAAI,MAAM,GAAG,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC;wBAC7B,OAAO,EAAE,aAAa;qBACzB,CAAC,CAAC;oBACH,6BAA6B;oBAC7B,MAAM,CAAC,OAAO,EAAE,CAAC;oBACjB,4BAA4B;oBAC5B,KAAI,CAAC,cAAc,GAAG,IAAI,IAAI,CAAC,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;oBACrD,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAE,IAAI,CAAC,CAAC;oBACtD,yDAAyD;oBACzD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC7B,gCAAgC;oBAChC,MAAM,CAAC,OAAO,EAAE,CAAC;oBACjB,qBAAqB;oBACrB,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBACxB,CAAC,CAAC,CAAC;YACX,CAAC,CAAC;QACN,CAAC;IACL,CAAC;IAEM,kCAAW,GAAlB,UAAmB,KAAK;QACpB;iBACS;QACT,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IAChC,CAAC;IAEM,8CAAuB,GAA9B;QACI,qFAAqF;QACrF,MAAM,CAAC,IAAI,CAAC,cAAc;IAC9B,CAAC;IAEL,mBAAC;AAAD,CAAC;AA3DY,YAAY;IADxB,yEAAU,EAAE;qCASgB,2DAAI,EAAkB,wEAAiB;GARvD,YAAY,CA2DxB;AA3DwB;;;;;;;;;;;;;;;;;;;;;;;;ACzBiB;AACe;AACzD,oBAAoB;AACgE;AACA;AACpF,qBAAqB;AAC6E;AAOlG,IAAa,iBAAiB;IAM1B,2BACW,OAAsB,EACtB,SAAoB,EACpB,sBAAiD;QAFjD,YAAO,GAAP,OAAO,CAAe;QACtB,cAAS,GAAT,SAAS,CAAW;QACpB,2BAAsB,GAAtB,sBAAsB,CAA2B;QACpD,sDAAsD;QACtD,IAAI,CAAC,iBAAiB,EAAE,CAAC;IACjC,CAAC;IAAA,CAAC;IAEF,6CAAiB,GAAjB;QAAA,iBAUC;QATG;0DACkD;QAClD,IAAI,KAAK,GAAG,sBAAsB,CAAC;QAEnC,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,KAAK,CAAC;aACrD,IAAI,CAAC,cAAI;YACN,+CAA+C;YAC/C,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC9B,CAAC,CAAC,CAAC;IACX,CAAC;IAAA,CAAC;IAEF,2CAAe,GAAf,UAAgB,cAAc;QAC1B;yCACiC;QACjC,uDAAuD;QACvD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,wGAAsB,EAAC,EAAC,cAAc,EAAE,cAAc,EAAC,CAAC;IAC9E,CAAC;IAAA,CAAC;IAEF,+CAAmB,GAAnB;QACI,oEAAoE;QACpE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,wGAAsB,CAAC;IAC7C,CAAC;IAEL,wBAAC;AAAD,CAAC;AAtCY,iBAAiB;IAL7B,wEAAS,CAAC;QACP,QAAQ,EAAE,oBAAoB;OACG;KACpC,CAAC;yEASmC;QACX,mHAAS;QACI,cAAyB;AA6B/D;SAtCY,iBAAiB,e;;;;;;;;;;;;;;;;;;;;;;;;ACbY;AACe;AACzD,mBAAmB;AACqD;AACA;AACxE,qBAAqB;AAC6E;AACnC;AAM/D,IAAa,sBAAsB;IAa/B,gCACW,OAAsB,EACtB,SAAoB,EACpB,sBAAiD,EACjD,iBAAiC;QAHjC,YAAO,GAAP,OAAO,CAAe;QACtB,cAAS,GAAT,SAAS,CAAW;QACpB,2BAAsB,GAAtB,sBAAsB,CAA2B;QACjD,sBAAiB,GAAjB,iBAAiB,CAAgB;QACpC,+CAA+C;QAC/C,IAAI,CAAC,2BAA2B,GAAG,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QACnE,iDAAiD;QACjD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QAC3D,wCAAwC;QACxC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,2BAA2B,CAAC;QACnD,0CAA0C;QAC1C,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;IAChE,CAAC;IAED,oDAAmB,GAAnB,UAAoB,cAAc;QAAlC,iBAYC;QAXG;qFAC6E;QAC7E,IAAI,KAAK,GAAG,sBAAsB,CAAC;QAEnC,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,cAAc,EAAE,KAAK,CAAC;aACrE,IAAI,CAAC,cAAI;YACN,kCAAkC;YAClC,KAAI,CAAC,6BAA6B,GAAG,IAAI,CAAC;YAC1C,0CAA0C;YAC1C,uCAAuC;QAC3C,CAAC,CAAC;IACV,CAAC;IAAA,CAAC;IAEF,4CAA4C;IAC5C,6CAAY,GAAZ,UAAa,cAAc;QAA3B,iBASC;QARG,IAAI,KAAK,GAAG,sBAAsB,CAAC;QAEnC,IAAI,CAAC,sBAAsB,CAAC,wBAAwB,CAAC,cAAc,EAAE,KAAK,CAAC;aACtE,IAAI,CAAC,cAAI;YACN,kCAAkC;YAClC,KAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QAErC,CAAC,CAAC;IACV,CAAC;IAED,4CAAW,GAAX,UAAY,UAAU;QAClB;oCAC4B;QAC5B,8DAA8D;QAC9D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,4FAAkB,EAAC,EAAC,UAAU,EAAE,UAAU,EAAC,CAAC,CAAC;IACnE,CAAC;IAAA,CAAC;IAEF,uDAAsB,GAAtB;QACI;;oCAE4B;QAC5B,IAAI,aAAa,GAAG;YAChB,OAAO,EAAE,IAAI,CAAC,6BAA6B,CAAC,KAAK;YACjD,SAAS,EAAE,IAAI,CAAC,6BAA6B,CAAC,OAAO;YACrD,OAAO,EAAE,IAAI,CAAC,6BAA6B,CAAC,KAAK;YACjD,UAAU,EAAE,IAAI,CAAC,6BAA6B,CAAC,QAAQ;YACvD,UAAU,EAAE,IAAI,CAAC,6BAA6B,CAAC,QAAQ;YACvD,YAAY,EAAE,IAAI,CAAC,6BAA6B,CAAC,UAAU;YAC3D,UAAU,EAAE,IAAI,CAAC,6BAA6B,CAAC,UAAU,CAAC;YAC1D,eAAe,EAAE,IAAI,CAAC,6BAA6B,CAAC,aAAa;YACjE,YAAY,EAAE,IAAI,CAAC,6BAA6B,CAAC,UAAU;YAC3D,aAAa,EAAE,IAAI,CAAC,6BAA6B,CAAC,WAAW;YAC7D,UAAU,EAAE,IAAI,CAAC,6BAA6B,CAAC,QAAQ;YACvD,SAAS,EAAE,IAAI,CAAC,6BAA6B,CAAC,OAAO;SACxD,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;QAE5C,IAAI,KAAK,GAAG,sBAAsB,CAAC;QAEnC,IAAI,CAAC,sBAAsB,CAAC,sBAAsB,CAAC,aAAa,EAAE,IAAI,CAAC,2BAA2B,EAAE,KAAK,CAAC;aACrG,IAAI,CAAC,cAAI;YACN,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC;IACV,CAAC;IAAA,CAAC;IAEF,iDAAgB,GAAhB,UAAiB,cAAc;QAC3B;qFAC6E;QAFjF,iBAUC;QANG,IAAI,KAAK,GAAG,sBAAsB,CAAC;QACnC,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,KAAK,EAAE,cAAc,CAAC;aACjE,IAAI,CAAC,cAAI;YACN,KAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QAErC,CAAC,CAAC,CAAC;IACX,CAAC;IAAA,CAAC;IAEF,gDAAe,GAAf;QACI;2CACmC;QACnC,2EAA2E;QAC3E,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,4FAAkB,EAAE;YAClC,cAAc,EAAE,IAAI,CAAC,2BAA2B;SACnD,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,6BAAC;AAAD,CAAC;AA9GY,sBAAsB;IAJlC,wEAAS,CAAC;QACP,QAAQ,EAAE,0BAA0B;OACG;KAC1C,CAAC;yEAemC;QACX,mHAAS;QACI,kFAAyB;QAC9B,cAAc;AA6F/C;SA9GY,sBAAsB,gB;;;;;;;;;;;;;;;;;;;;;;ACbO;AACe;AACT;AAChD,qBAAqB;AAC8D;AACT;AAO1E,IAAa,kBAAkB;IAU3B,4BACW,OAAsB,EACtB,SAAoB,EACpB,iBAAuC,EACvC,cAAiC,EACjC,SAA0B;QAJ1B,YAAO,GAAP,OAAO,CAAe;QACtB,cAAS,GAAT,SAAS,CAAW;QACpB,sBAAiB,GAAjB,iBAAiB,CAAsB;QACvC,mBAAc,GAAd,cAAc,CAAmB;QACjC,cAAS,GAAT,SAAS,CAAiB;QAC7B,4CAA4C;QAC5C,IAAI,CAAC,uBAAuB,GAAG,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC3D,4CAA4C;QAC5C,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QACvD,qBAAqB;QACrB,IAAI,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;IAAA,CAAC;IAEF,gDAAmB,GAAnB,UAAoB,UAAU;QAA9B,iBAUC;QATG;iFACyE;QACzE,IAAI,KAAK,GAAG,sBAAsB,CAAC;QAEnC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,UAAU,EAAE,KAAK,CAAC;aACxD,IAAI,CAAC,cAAI;YACN,kCAAkC;YAClC,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAC7B,CAAC,CAAC;IACV,CAAC;IAAA,CAAC;IAEF,+CAAkB,GAAlB;QACI;;wDAEgD;QAEhD,IAAI,aAAa,GAAG;YAChB,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;YACvC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YACnC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;YACrC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC;YAC3C,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YACnC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;YACzC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;YACzC,eAAe,EAAE,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC;YACnD,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;YACrC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;YACzC,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;YAC/C,QAAQ,EAAE;gBACN,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC;gBACxC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC;gBAChD,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC;gBAClD,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC1C,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC;gBAChD,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC;aACnD;SACJ,CAAC;QACF,+DAA+D;QAC/D,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,aAAa,CAAC,CAAC;QAEtD,IAAI,KAAK,GAAG,sBAAsB,CAAC;QAEnC,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,aAAa,EAAE,IAAI,CAAC,uBAAuB,EAAE,KAAK,CAAC;aACxF,IAAI,CAAC,cAAI;YACN,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC;IACV,CAAC;IAAA,CAAC;IAEF,0CAAa,GAAb;QACI;2CACmC;QAFvC,iBAWC;QAPG,IAAI,KAAK,GAAG,sBAAsB,CAAC;QAEnC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC;aAC/B,IAAI,CAAC,cAAI;YACN,qBAAqB;YACrB,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACtB,CAAC,CAAC;IACV,CAAC;IAAA,CAAC;IAEF,2CAAc,GAAd;QACI;;yBAEiB;QAHrB,iBAmCC;QA9BG,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YAChC,KAAK,EAAE,4BAA4B;YACnC,OAAO,EAAE,6DAA6D;YACtE,OAAO,EAAE;gBACL;oBACI,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;oBACtC,CAAC;iBACJ;gBACD;oBACI,IAAI,EAAE,SAAS;oBACf,OAAO,EAAE;wBACL,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;wBACzD,IAAI,KAAK,GAAG,sBAAsB,CAAC;wBACnC,oCAAoC;wBACpC,KAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,KAAI,CAAC,uBAAuB,EAAE,KAAK,CAAC;6BACvE,IAAI,CAAC,cAAI;4BACN,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC;gCAC9B,KAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;4BACvB,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,KAAK,CAAC,+CAA+C,CAAC;4BAC1D,CAAC;wBACL,CAAC,CAAC;oBACT,CAAC;iBACL;aACJ;SACJ,CAAC,CAAC;QACH,gCAAgC;QAChC,OAAO,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC;IAAA,CAAC;IACN,yBAAC;AAAD,CAAC;AA1HY,kBAAkB;IAL9B,wEAAS,CAAC;QACP,QAAQ,EAAE,sBAAsB;OACG;KACtC,CAAC;yEAamC;QACX,oGAAS;QACD,4FAAoB;QACvB,wEAAiB;QACtB,eAAe;AA2GxC;SA1HY,kBAAkB,gB;;;;;;;;;;;;;;;;;;;;;;;ACZW;AACe;AACzD,wBAAwB;AACuC;AACW;AACS;AAMnF,IAAa,kBAAkB;IAU3B,4BACW,OAAsB,EACtB,SAAoB,EACpB,iBAAiC,EACjC,cAAiC,EACjC,iBAAuC;QAJvC,YAAO,GAAP,OAAO,CAAe;QACtB,cAAS,GAAT,SAAS,CAAW;QACpB,sBAAiB,GAAjB,iBAAiB,CAAgB;QACjC,mBAAc,GAAd,cAAc,CAAmB;QACjC,sBAAiB,GAAjB,iBAAiB,CAAsB;QAC1C,qBAAqB;QACrB,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,kCAAkC;QAClC,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QACtD,yCAAyC;QACzC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC3C,qCAAqC;QACrC,IAAI,CAAC,kBAAkB,GAAG,EAAC,eAAe,EAAE,IAAI,CAAC,cAAc,EAAE,UAAU,EAAC,EAAE,EAAC,CAAC;IACxF,CAAC;IAAA,CAAC;IAEF,4CAAe,GAAf;QAAA,iBAcC;QAbG;;gCAEwB;QACxB,IAAI,KAAK,GAAG,sBAAsB,CAAC;QAEnC,OAAO,CAAC,GAAG,CAAC,4BAA4B,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACnE,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,kBAAkB,EAAE,KAAK,CAAC;aACjE,IAAI,CAAC,cAAI;YACN,OAAO,CAAC,GAAG,CAAC,2CAA2C,EAAE,IAAI,CAAC,CAAC;YAC/D,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACP,KAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;YACvB,CAAC;YAAA,CAAC;QACN,CAAC,CAAC,CAAC;IACX,CAAC;IAAA,CAAC;IAEF,0CAAa,GAAb;QAAA,iBAUC;QATG;oCAC4B;QAC5B,IAAI,KAAK,GAAG,sBAAsB,CAAC;QAEnC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC;aAC/B,IAAI,CAAC,cAAI;YACN,qBAAqB;YACrB,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACtB,CAAC,CAAC,CAAC;IACX,CAAC;IAAA,CAAC;IAEF,6CAAgB,GAAhB,UAAiB,cAAc;QAA/B,iBASC;QARG;8FACsF;QACtF,IAAI,KAAK,GAAG,sBAAsB,CAAC;QAEnC,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,KAAK,EAAE,cAAc,CAAC;aACjE,IAAI,CAAC,cAAI;YACN,KAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QACrC,CAAC,CAAC,CAAC;IACX,CAAC;IAAA,CAAC;IACN,yBAAC;AAAD,CAAC;AAhEY,kBAAkB;IAJ9B,wEAAS,CAAC;QACP,QAAQ,EAAE,sBAAsB;OACG;KACtC,CAAC;yEAYmC;QACX,gFAAS;QACD,2FAAc;QACjB,oGAAiB;QACd,eAAoB;AAiDrD;SAhEY,kBAAkB,gB;;;;;;;;;;;;;;;;;;;;;ACXW;AACe;AACwC;AAOjG,IAAa,sBAAsB;IAIjC,gCACS,OAAsB,EACtB,SAAoB,EACpB,sBAAiD;QAFjD,YAAO,GAAP,OAAO,CAAe;QACtB,cAAS,GAAT,SAAS,CAAW;QACpB,2BAAsB,GAAtB,sBAAsB,CAA2B;QACtD,IAAI,CAAC,wBAAwB,GAAG,EAAE,CAAC;IACvC,CAAC;IAED,oDAAmB,GAAnB;QACE;;oCAE4B;QAC5B,IAAI,aAAa,GAAG;YAChB,OAAO,EAAE,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC;YAC/C,SAAS,EAAE,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC;YACnD,OAAO,EAAE,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC;YAC/C,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC;YACrD,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC;YACrD,YAAY,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC;YACzD,eAAe,EAAE,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC;YAC/D,YAAY,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC;YACzD,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC;YACrD,aAAa,EAAE,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC;YAC3D,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC;YACrD,SAAS,EAAE,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC;YACnD,oBAAoB,EAAE,CAAC;SAC1B,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;QAE5C,IAAI,KAAK,GAAG,sBAAsB,CAAC;QAEnC,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,aAAa,EAAE,KAAK,CAAC;aAC9D,IAAI,CAAC,cAAI;YACN,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC,CAAC;IACR,CAAC;IAAA,CAAC;IACJ,6BAAC;AAAD,CAAC;AAxCY,sBAAsB;IAJlC,wEAAS,CAAC;QACT,QAAQ,EAAE,0BAA0B;OACG;KACxC,CAAC;yEAM+B;QACX,mHAAS;QACI,mBAAyB;AAiC3D;SAxCY,sBAAsB,gB;;;;;;;;;;;;;;;;;;;;;;;ACTQ;AACG;AACf;AACmB;AAGlD,IAAa,oBAAoB;IAO7B,8BAAmB,IAAU,EAAS,OAA0B;QAA7C,SAAI,GAAJ,IAAI,CAAM;QAAS,YAAO,GAAP,OAAO,CAAmB;QAHhE,gBAAgB;QAChB,QAAG,GAAW,mCAAmC,CAAC;IAEiB,CAAC;IAEpE,qDAAsB,GAAtB,UAAuB,KAAK;QAA5B,iBA6BC;QA5BG;gFACwE;QACxE,EAAE,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QACzD,CAAC;QACD,gBAAgB;QAChB,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,oCAAoC,EAAC,CAAC,CAAC;QAClF,6BAA6B;QAC7B,MAAM,CAAC,OAAO,EAAE,CAAC;QACjB,gDAAgD;QAChD,MAAM,CAAC,IAAI,OAAO,CAAC,iBAAO;YACtB,2BAA2B;YAC3B,IAAI,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC/B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YACnD,qBAAqB;YACrB,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAI,CAAC,GAAG,GAAG,QAAQ,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;iBACjD,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,cAAI;gBACX,kCAAkC;gBAClC,KAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;gBACpC,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,IAAI,CAAC,CAAC;gBACvD,mBAAmB;gBACnB,OAAO,CAAC,KAAI,CAAC,uBAAuB,CAAC,CAAC;gBACtC,mCAAmC;gBACnC,MAAM,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC,CAAC;QACX,CAAC,CAAC;IACN,CAAC;IACL,2BAAC;AAAD,CAAC;AAvCY,oBAAoB;IADhC,yEAAU,EAAE;qCAQgB,2DAAI,EAAkB,wEAAiB;GAPvD,oBAAoB,CAuChC;AAvCgC;;;;;;;;;;;;ACN0C;AAElC;AAEzC,yGAAsB,EAAE,CAAC,eAAe,CAAC,8DAAS,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJM;AACH;AACkB;AACd;AACN;AACV;AACS;AACpD,mBAAmB;AACqB;AACM;AACY;AACT;AACwB;AACiB;AACA;AACZ;AACA;AAC9E,qBAAqB;AACiC;AAC0B;AACe;AACf;AACT;AACX;AA4C5D,IAAa,SAAS;IAAtB;IAAwB,CAAC;IAAD,gBAAC;AAAD,CAAC;AAAZ,SAAS;IA1CrB,uEAAQ,CAAC;QACN,YAAY,EAAE;YACV,6DAAK;YACL,kEAAQ;YACR,8EAAY;YACZ,sEAAS;YACT,8FAAiB;YACjB,+GAAsB;YACtB,mGAAkB;YAClB,mGAAkB;YAClB,+GAAsB;SACzB;QACD,OAAO,EAAE;YACL,gFAAa;YACb,iEAAU;YACV,kEAAW,CAAC,OAAO,CAAC,6DAAK,CAAC;YAC1B,0EAAkB,CAAC,OAAO,EAAE;SAC/B;QACD,SAAS,EAAE,CAAC,+DAAQ,CAAC;QACrB,eAAe,EAAE;YACb,6DAAK;YACL,kEAAQ;YACR,8EAAY;YACZ,sEAAS;YACT,8FAAiB;YACjB,+GAAsB;YACtB,mGAAkB;YAClB,mGAAkB;YAClB,+GAAsB;SACzB;QACD,SAAS,EAAE;YACP,2EAAS;YACT,iFAAY;YACZ,EAAC,OAAO,EAAE,mEAAY,EAAE,QAAQ,EAAE,wEAAiB,EAAC;YACpD,2EAAY;YACZ,qGAAoB;YACpB,oHAAyB;YACzB,qGAAoB;YACpB,4FAAiB;YACjB,iFAAc;SACjB;KACJ,CAAC;GACW,SAAS,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;ACnE+B;AACP;AACO;AACM;AAC3D,mBAAmB;AAE8B;AACwB;AAMzE,IAAa,KAAK;IAUd,eACI,QAAkB,EAClB,SAAoB,EACpB,YAA0B;QAV9B,cAAc;QACd,aAAQ,GAAO,qEAAS,CAAC;QAWjB,kCAAkC;QAClC,IAAI,CAAC,OAAO,GAAG;YACX,EAAE,MAAM,EAAE,eAAe,EAAE,SAAS,EAAE,6FAAiB,EAAE,IAAI,EAAE,OAAO,EAAE;SAC3E;QACD,kCAAkC;QAClC,QAAQ,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC;YAClB,SAAS,CAAC,YAAY,EAAE,CAAC;YACzB,YAAY,CAAC,IAAI,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACX,CAAC;IAED,4BAAY,GAAZ,UAAa,IAAI;QACb;6CACqC;QACrC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC;IACpC,CAAC;IACL,YAAC;AAAD,CAAC;AA7BmB;IAAf,0EAAS,CAAC,0DAAG,CAAC;8BAAM,0DAAG;kCAAC;AAFhB,KAAK;IAJjB,wEAAS,CAAC;OACgB;KAC1B,CAAC;oFAawB;QACP,iFAAS;QACN,EAAY;AAkBjC;SA/BY,KAAK,2B;;;;;;;;;;;;;;;;;;;;;ACbwB;AACe;AACzD,qBAAqB;AAC8D;AAOnF,IAAa,YAAY;IAkBrB,sBACW,OAAsB,EACtB,SAAoB,EACnB,iBAAuC;QAFxC,YAAO,GAAP,OAAO,CAAe;QACtB,cAAS,GAAT,SAAS,CAAW;QACnB,sBAAiB,GAAjB,iBAAiB,CAAsB;QAC3C,6CAA6C;QAC7C,IAAI,CAAC,sBAAsB,EAAE,CAAC;IACtC,CAAC;IAED,6CAAsB,GAAtB;QACI;sEAC8D;QAFlE,iBAsBC;QAlBG,IAAI,KAAK,GAAG,sBAAsB,CAAC;QAEnC,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,KAAK,CAAC;aAC/C,IAAI,CAAC,cAAI;YACN,oCAAoC;YACpC,KAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5C,qCAAqC;YACrC,KAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5C,6BAA6B;YAC7B,KAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9C,KAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9C,0BAA0B;YAC1B,KAAI,CAAC,6BAA6B,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,KAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/C,iDAAiD;YACjD,KAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,KAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC;IACV,CAAC;IAEL,mBAAC;AAAD,CAAC;AAlDY,YAAY;IALxB,wEAAS,CAAC;QACP,QAAQ,EAAE,eAAe;OACG;KAC/B,CAAC;yEAqBmC;QACX,oGAAS;QACA,SAAoB;AA6BtD;SAlDY,YAAY,e;;;;;;;;;;;;;;;;;;;;;;;ACVkB;AACG;AACf;AACmB;AAGlD,IAAa,yBAAyB;IASlC,mCAAmB,IAAU,EAAS,OAA0B;QAA7C,SAAI,GAAJ,IAAI,CAAM;QAAS,YAAO,GAAP,OAAO,CAAmB;QARhE;qEAC6D;QAE7D,gBAAgB;QAChB,QAAG,GAAW,uBAAuB,CAAC;IAI6B,CAAC;IAEpE,2DAAuB,GAAvB,UAAwB,KAAK;QAA7B,iBA4BC;QA3BG;+DACuD;QACvD,EAAE,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;QAC9D,CAAC;QACD,gBAAgB;QAChB,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,6BAA6B,EAAC,CAAC,CAAC;QAC3E,kBAAkB;QAClB,MAAM,CAAC,OAAO,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,OAAO,CAAC,iBAAO;YACtB,iCAAiC;YACjC,IAAI,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YACvC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YACnD,qBAAqB;YACrB,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAI,CAAC,GAAG,GAAG,eAAe,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;iBACxD,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,cAAI;gBACX,+CAA+C;gBAC/C,KAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC;gBACzC,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAE,IAAI,CAAC,CAAC;gBACtD,mBAAmB;gBACnB,OAAO,CAAC,KAAI,CAAC,4BAA4B,CAAC,CAAC;gBAC3C,mCAAmC;gBACnC,MAAM,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC,CAAC;QACX,CAAC,CAAC;IACN,CAAC;IAED,2DAAuB,GAAvB,UAAwB,cAAc,EAAE,KAAK;QACzC;6EACqE;QAFzE,iBAwBC;QApBG,gBAAgB;QAChB,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,uBAAuB,EAAC,CAAC,CAAC;QACrE,6BAA6B;QAC7B,MAAM,CAAC,OAAO,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,OAAO,CAAC,iBAAO;YACtB,iCAAiC;YACjC,IAAI,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YACvC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YACnD,sBAAsB;YACtB,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAI,CAAC,GAAG,GAAG,gBAAgB,GAAG,cAAc,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;iBAC1E,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,cAAI;gBACX,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,IAAI,CAAC,CAAC;gBACnD,mBAAmB;gBACnB,OAAO,CAAC,IAAI,CAAC,CAAC;gBACd,mCAAmC;gBACnC,MAAM,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC;QACV,CAAC,CAAC;IACN,CAAC;IAED,4DAAwB,GAAxB,UAAyB,cAAc,EAAC,KAAK;QAA7C,iBAoBC;QAnBG,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,wBAAwB,EAAC,CAAC,CAAC;QACtE,6BAA6B;QAC7B,MAAM,CAAC,OAAO,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,OAAO,CAAC,iBAAO;YACtB,iCAAiC;YACjC,IAAI,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YACvC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YACnD,sBAAsB;YACtB,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAI,CAAC,GAAG,GAAG,gBAAgB,GAAG,cAAc,GAAG,WAAW,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;iBACxF,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,cAAI;gBACX,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAAC,CAAC;gBACjD,mBAAmB;gBACnB,OAAO,CAAC,IAAI,CAAC,CAAC;gBACd,mCAAmC;gBACnC,MAAM,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC;QACV,CAAC,CAAC;IACN,CAAC;IAED,0DAAsB,GAAtB,UAAuB,gBAAgB,EAAE,cAAc,EAAE,KAAK;QAC1D;8FACsF;QAF1F,iBAqBC;QAjBE,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,CAAC,CAAC;QAC7E,iBAAiB;QACjB,MAAM,CAAC,OAAO,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,OAAO,CAAC,iBAAO;YACtB,iCAAiC;YACjC,IAAI,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;YAClB,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YACvC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YACnD,uBAAuB;YACvB,KAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAI,CAAC,GAAG,GAAG,gBAAgB,GAAG,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;iBAChH,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,cAAI;gBACX,OAAO,CAAC,IAAI,CAAC,CAAC;gBACd,MAAM,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC;QACV,CAAC,CAAC;IACL,CAAC;IAED,qDAAiB,GAAjB,UAAkB,gBAAgB,EAAC,KAAK;QAAxC,iBAkBC;QAjBG,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,CAAC,CAAC;QAC9E,iBAAiB;QACjB,MAAM,CAAC,OAAO,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,OAAO,CAAC,iBAAO;YACtB,iCAAiC;YACjC,IAAI,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;YAClB,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YACvC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YACnD,sBAAsB;YACtB,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,GAAG,GAAG,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;iBAC9F,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,cAAI;gBACX,OAAO,CAAC,IAAI,CAAC,CAAC;gBACd,MAAM,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC;QACV,CAAC,CAAC;IACL,CAAC;IAEL,gCAAC;AAAD,CAAC;AApIY,yBAAyB;IADrC,yEAAU,EAAE;qCAUgB,2DAAI,EAAkB,wEAAiB;GATvD,yBAAyB,CAoIrC;AApIqC","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { LoadingController } from 'ionic-angular';\n\n@Injectable()\nexport class DataCarrerasProvider {\n    /* DataCarrerasProvider: provider de la información de las carreras.\n    Tiene todas las funciones necesarias para manejar la info */\n\n    // Url de la API\n    api: string = 'http://localhost:3000';\n\n    constructor(public http: Http, public loading: LoadingController) {}\n\n    get_detalle_carrera(id_carrera, token) {\n        /* get_detalle_carrera: funcion para recibir la informacion detallada de una\n        carrera. Recibe el token y el id de la universidad a consultar */\n\n        // Crear loader\n        let loader = this.loading.create({ content: 'Recibiendo detalle...' });\n        // Mostrar loader en pantalla\n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la API \n            this.http.get(this.api + '/carreers/' + id_carrera, { headers: headers })\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Informacion de la carrera', data);\n                    // Resolver promesa\n                    resolve(data);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                })\n        }) \n    };\n\n    actualizar_carrera(data_carrera, id_carrera, token) {\n        /* actualizar_carrera: funcion para actualizar la informacion de una carrera\n        lo que hace es recibir un json con toda la informacion y la manda */\n\n        let loader = this.loading.create({ content: 'Actualizando carrera...' });\n        loader.present();\n\n        return new Promise(resolve => {\n            // Headers para hacer la consulta \n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer Patch a la API\n            this.http.patch(this.api + '/carreers/' + id_carrera, JSON.stringify(data_carrera), { headers: headers })\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Data al actualizar info carrera', data);\n                    resolve(data);\n                    loader.dismiss();\n                })\n        })\n    };\n\n    agregar_carrera(data_a_enviar, token) {\n        /* agregar_carrera: funcion para agregar una carrera. Hace post a la API  */\n        let loader = this.loading.create({ content: 'Agregando carrera...' });\n        loader.present();\n\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer POST a la API \n            this.http.post(this.api + '/carreers', JSON.stringify(data_a_enviar), {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    resolve(data);\n                    loader.dismiss();\n                }, error => {\n                    alert('Ocurrió un error al intentar agregar la carrera');\n                    console.log('Ocurrió un error al intentar agregar la carrera', error);\n                    loader.dismiss();\n                });\n        });\n    };\n\n    eliminar_carrera(id_carrera, token) {\n        /* eliminar_carrera: funcion para eliminar una carrera. Recibe el id de la carrera\n        y hace DELETE a la API */\n        let loader = this.loading.create({ content: 'Eliminando carrera...' });\n        loader.present();\n\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n\n            this.http.delete(this.api + '/carreers/' + id_carrera, { headers: headers })\n                .map(res => res.json())\n                .subscribe(data => {\n                    resolve(data);\n                    console.log('Data recibida al borrar una carrera', data);\n                    loader.dismiss();\n                }, error => {\n                    alert('Ocurrió un error al intentar borrar una carrera');\n                    console.log('Ocurrió un error al intentar borrar una carrera', error);\n                    loader.dismiss();\n                });\n        });\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/data-carreras/data-carreras.ts","import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { LoadingController } from 'ionic-angular';\n\n@Injectable()\nexport class DataAreasProvider {\n    /* DataAreasProvider: provider para toda la información de las areas.\n    Tiene todas las funciones necesarias para manejar la informacion */\n\n    // Url de la API \n    api: string = 'http://localhost:3000';\n    // Areas guardadas\n    areas_guardadas: any;\n\n    constructor(public http: Http, public loading: LoadingController) {}\n\n    get_areas(token) {\n        /* get_areas: funcion para recibir todas las areas. Recibe el token \n        y hace un GET a la API */\n        if (this.areas_guardadas) {\n            return Promise.resolve(this.areas_guardadas);\n        }\n        // Crear loader \n        let loader = this.loading.create({ content: 'Recibiendo detalle...' });\n        // Mostrar loader en pantalla\n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('token', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer GET a la API \n            this.http.get(this.api + '/areas', { headers: headers })\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Areas recibidas', data);\n                    // Resolver promesa\n                    resolve(data);\n                    // Desaparece loader de la pantala \n                    loader.dismiss();\n                })\n        })\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/data-areas/data-areas.ts","import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { LoadingController } from 'ionic-angular';\n\n@Injectable()\nexport class CampusProvider {\n    /* campusprovider: provider con todas las funciones para controlar\n    la informacion de los campuses */\n\n    // Url de la api\n    api: string = 'http://localhost:3000';\n\n    constructor(public http: Http, public loading: LoadingController) {};\n\n    get_campuses_universidad(token, id_universidad) {\n        /* get_campuses_universidad: funcion para recibir todos los campuses\n        de la universidad que recibe */\n\n        // Crear loader \n        let loader = this.loading.create({content: 'Recibiendo universidades...'});\n        // Mostrar loader \n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('token', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la api\n            this.http.get(this.api + '/universities/' + id_universidad + '/campus', {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Informacion de los campuses recibidos', data);\n                    // Resolver promesa\n                    resolve(data);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                });\n        });\n    };\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/campus/campus.ts","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 112;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/@angular lazy\n// module id = 112\n// module chunks = 0","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 154;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 154\n// module chunks = 0","import { Component } from '@angular/core';\nimport { NavController, NavParams, LoadingController, MenuController } from 'ionic-angular';\nimport { Storage } from '@ionic/storage';\n// Importar paginas\nimport { HomePage } from '../home/home';\n// Import providers\nimport { AuthProvider } from '../../providers/auth/auth';\n\n@Component({\n    selector: 'page-login',\n    templateUrl: 'login.html',\n})\n\nexport class LoginPage {\n    /* Login: pagina de login del administrador. El usuario ingresa las credenciales\n    y solo entra a la siguiente pagina si es administrador */\n\n    credenciales: any = {email: '', password: ''};\n\n    constructor(\n        public nav: NavController, \n        public navParams: NavParams,\n        public loading: LoadingController,\n        public menuCtrl: MenuController,\n        public auth: AuthProvider,\n        public storage: Storage) {\n\n            this.storage.get('user').then((val) => {\n                // Si está 'user' guardado en el storage\n                if (val != null) {\n                    // Setear el usuario actual con el valor que está guardado\n                    this.auth.setUserInfo(val);    \n                    // Convertir la pagina root en la página de inicio\n                    this.nav.setRoot(HomePage);\n                    // Habilitar el menú principal\n                    this.menuCtrl.enable(true);\n                }            \n            });\n            // Deshabilitar el menu dentro del login\n            this.menuCtrl.enable(false);\n    }\n\n     public login() {\n         /* login: funcion para hacer login dentro de la plataforma. Llama a la funcion\n         del provider auth. Si pasa el observer setea a la pagina home como root. */\n         this.auth.login(this.credenciales)\n             .subscribe(allowed => {\n                 if (allowed) {\n                     // Setear el usuario actual\n                    this.storage.set('user', this.auth.get_usuario_actual_info());\n                    console.log('Se seteo el usuario', this.storage.get('user'));\n                     // Setear la pagina de inicio como root\n                     this.nav.setRoot(HomePage);\n                     // Habilitar el menu\n                     this.menuCtrl.enable(true);\n                 }\n                 // Si no tiene acceso ese usuario\n                 else {\n                     alert('Acceso denegado');\n                 }\n             }, error => {\n                 alert(error);\n             })\n     }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\n@Component({\n  selector: 'page-home',\n  templateUrl: 'home.html'\n})\nexport class HomePage {\n\n  constructor(public navCtrl: NavController) {\n\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/home/home.ts","import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport { LoadingController } from 'ionic-angular';\n\nexport class User {\n    /* Clase de un usuario para guardar la información del suauio actual.\n    Recibe toda la información basica */\n    id: number;\n    name: string;\n    email: string;\n\n    constructor(\n        id: number,\n        name: string,\n        email: string) {\n            // Setear la información del usuario actual\n            this.id = id;\n            this.name = name;\n            this.email = email;\n    }\n}\n\n@Injectable()\nexport class AuthProvider {\n\n    api: string = 'http://localhost:3000';\n    // Usuario actual\n    usuario_actual: User;\n    // Información recibida\n    data: any;\n\n    constructor(public http: Http, public loading: LoadingController) {}\n\n    login(credenciales) {\n        /* login: recibe las credenciales. Revisa si las credenciales son no nulas y \n        si lo son hace la consulta a la API */\n        if (credenciales.email === null || credenciales.password === null) {\n            return Observable.throw('Ingresa las credenciales.');\n        } \n        // Si las credenciales son válidas\n        else {\n            return Observable.create(observer => {\n                // Crear los headers para llamar a la API\n                let headers = new Headers();\n                headers.append('Accept', 'application/tuniversidad.v1');\n                headers.append('Content-Type', 'application/json');\n                let credenciales_a_mandar = {'session': {'email': credenciales.email, 'password': credenciales.password}}\n\n                return this.http.post(this.api + '/sessions', JSON.stringify(credenciales_a_mandar), {headers: headers})\n                    .map(res => res.json())\n                    .subscribe(data => {\n                        // Crear loader\n                        let loader = this.loading.create({\n                            content: 'Cargando...'\n                        });\n                        // Mostrar loader en pantalla\n                        loader.present();\n                        // Setear el usuario actual \n                        this.usuario_actual = new User(0, 'Nombre', 'Email');\n                        console.log('Información recibida en el login', data);\n                        // El observer pasa solo si el usuario ingresado es admin\n                        observer.next(data['admin']);\n                        // Desaparece loader de pantalla\n                        loader.dismiss();\n                        // Completar observer\n                        observer.complete();\n                    });\n            })\n        }\n    }\n\n    public setUserInfo(value) {\n        /* setUserInfo: Funcion para setear información del usuario\n        actual */\n        this.usuario_actual = value;\n    }\n\n    public get_usuario_actual_info() {\n        /* get_usuario_actual_info: funcion para recibir la informacion del usuario actual */\n        return this.usuario_actual\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/auth/auth.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams } from 'ionic-angular';\n// Importar paginas \nimport { DetalleUniversidadPage } from '../detalle-universidad/detalle-universidad';\nimport { AgregarUniversidadPage } from '../agregar-universidad/agregar-universidad'; \n// Importar providers\nimport { DataUniversidadesProvider } from '../../providers/data-universidades/data-universidades';\n\n@Component({\n    selector: 'page-universidades',\n    templateUrl: 'universidades.html',\n})\n\nexport class UniversidadesPage {\n    /* UniversidadesPage: pagina donde se muestra una lista con info basica\n    de las universidades */\n\n    universidades: any;\n\n    constructor(\n        public navCtrl: NavController, \n        public navParams: NavParams,\n        public provider_universidades: DataUniversidadesProvider) {\n            // Llamar a la funcion para recibir las universidades \n            this.get_universidades();\n    };\n\n    get_universidades() {\n        /* get_universidades: funcion que llama a la funcion del provider para\n        recibir informacion basica de las universidades */\n        let token = 'PMinxy-vRxjbj_g3k8mt';\n\n        this.provider_universidades.get_todas_universidades(token)\n            .then(data => {\n                // Guardar la informacion de las universidades \n                this.universidades = data;\n            });\n    };\n\n    ver_universidad(id_universidad) {\n        /* ver_universidad: funcion para la navegación entre lista de universidades\n        con detalle de una universidad */\n        // Push a la pagina de detalle y le pasa la informacion\n        this.navCtrl.push(DetalleUniversidadPage,{id_universidad: id_universidad}) \n    };\n\n    agregar_universidad() {\n        // funcion para la navegación que lleva a vista de crear universidad\n        this.navCtrl.push(AgregarUniversidadPage) \n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/universidades/universidades.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams } from 'ionic-angular';\n// Importar paginas\nimport { DetalleCarreraPage } from '../detalle-carrera/detalle-carrera';\nimport { AgregarCarreraPage } from '../agregar-carrera/agregar-carrera';\n// Importar providers\nimport { DataUniversidadesProvider } from '../../providers/data-universidades/data-universidades';\nimport { CampusProvider } from '../../providers/campus/campus';\n\n@Component({\n    selector: 'page-detalle-universidad',\n    templateUrl: 'detalle-universidad.html',\n})\nexport class DetalleUniversidadPage {\n    /* DetalleUniversidadPage: pagina con toda la información detallada de la \n    universidad seleccionada. Desde acá se puede editar la información de la u */\n\n    // Id de la universidad seleccionada antes\n    id_universidad_seleccionada: any;\n    // Toda la informacion de la universidad seleccionada\n    info_universidad_seleccionada: any;\n    // Las carreras de la universidad \n    carreras_universidad: any;\n    // Campuses de la universidad \n    campuses_universidad: any;\n\n    constructor(\n        public navCtrl: NavController, \n        public navParams: NavParams,\n        public provider_universidades: DataUniversidadesProvider,\n        public provider_campuses: CampusProvider) {\n            // Recibir el id de la universidad seleccionada\n            this.id_universidad_seleccionada = navParams.get('id_universidad');\n            // Recibir toda la informacion de la universidad \n            this.recibir_informacion(this.id_universidad_seleccionada);\n            //recibir las carreras de la universidad\n            this.get_carreras(this.id_universidad_seleccionada)\n            // Recibir los campuses de la universidad \n            this.recibir_campuses(this.id_universidad_seleccionada);\n    }\n\n    recibir_informacion(id_universidad) {\n        /* recibir_informacion: funcion para recibir toda la informacion de la \n        universidad seleccionada. Llama a la funcion del provider y guarda la info */\n        let token = 'PMinxy-vRxjbj_g3k8mt';\n\n        this.provider_universidades.get_detalle_universidad(id_universidad, token)\n            .then(data => {\n                // Guardar la informacion recibida\n                this.info_universidad_seleccionada = data;\n                // Guardar las carreras de la universidad \n                // this.carreras_universidad = data[1];\n            })\n    };\n\n    //Para pedir las carreras de una universidad\n    get_carreras(id_universidad) {\n        let token = 'PMinxy-vRxjbj_g3k8mt';\n\n        this.provider_universidades.get_carreras_universidad(id_universidad, token)\n            .then(data => {\n                // Guardar la informacion recibida\n                this.carreras_universidad = data;\n\n            })\n    }\n\n    ver_carrera(id_carrera) {\n        /* ver_carrera: funcion para la navegacion entre la lista de carreras de una\n        universidad y su detalle. */\n        // Navegacion y le pasa el id de la carrera a la nueva pagina \n        this.navCtrl.push(DetalleCarreraPage,{id_carrera: id_carrera});\n    };\n\n    actualizar_universidad() {\n        /* actualizar_universidad: funcion para actualizar la informacion de una de \n        lcas universidades. Lo que hace es ordenar la data que se enviará y llama \n        a la funcion del provider */\n        let data_a_enviar = {\n            \"title\": this.info_universidad_seleccionada.title,\n            \"website\": this.info_universidad_seleccionada.website,\n            \"motto\": this.info_universidad_seleccionada.motto,\n            \"initials\": this.info_universidad_seleccionada.initials,\n            \"freeness\": this.info_universidad_seleccionada.freeness,\n            \"foundation\": this.info_universidad_seleccionada.foundation,\n            \"teachers\": this.info_universidad_seleccionada['teachers'],\n            \"postgraduates\": this.info_universidad_seleccionada.postgraduates,\n            \"doctorates\": this.info_universidad_seleccionada.doctorates,\n            \"description\": this.info_universidad_seleccionada.description,\n            \"students\": this.info_universidad_seleccionada.students,\n            \"degrees\": this.info_universidad_seleccionada.degrees,\n        };\n\n        console.log('Data a enviar', data_a_enviar);\n\n        let token = 'PMinxy-vRxjbj_g3k8mt';\n\n        this.provider_universidades.actualizar_universidad(data_a_enviar, this.id_universidad_seleccionada, token)\n            .then(data => {\n                console.log('Respuesta al actualizar', data);\n            })\n    };\n\n    recibir_campuses(id_universidad) {\n        /* recibir_campuses: funcion para recibir todos los campuses de una universidad,\n        Recibe el id de la universidad actual y consulta a la funcion del provider */\n\n        let token = 'PMinxy-vRxjbj_g3k8mt';\n        this.provider_campuses.get_campuses_universidad(token, id_universidad)\n            .then(data => {\n                this.campuses_universidad = data;\n                \n            });\n    };\n\n    agregar_carrera() {\n        /* agregar_carrera: funcion para la navegacion entre el detalle de una universidad \n        y la pagina para agregar carreas */\n        // Push a la pagina para agregar carreras. Le pasa el id de la universidad \n        this.navCtrl.push(AgregarCarreraPage, {\n            id_universidad: this.id_universidad_seleccionada\n        });\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/detalle-universidad/detalle-universidad.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams } from 'ionic-angular';\nimport { AlertController } from 'ionic-angular';\n// Importar providers\nimport { DataCarrerasProvider } from '../../providers/data-carreras/data-carreras';\nimport { DataAreasProvider } from '../../providers/data-areas/data-areas';\n\n@Component({\n    selector: 'page-detalle-carrera',\n    templateUrl: 'detalle-carrera.html',\n})\n\nexport class DetalleCarreraPage {\n    /* DetalleCarreraPage: pagina donde se ve toda la informacion de una \n    carrera en una universidad. Desde acá se puede editar la informacion */\n\n    id_carrera_seleccionada: any;\n    // Toda la informacion de la carrera \n    info_carrera: any;\n    areas: any;\n    area_nueva: any;\n\n    constructor(\n        public navCtrl: NavController, \n        public navParams: NavParams,\n        public provider_carreras: DataCarrerasProvider,\n        public provider_areas: DataAreasProvider,\n        public alertCtrl: AlertController) {\n            // Recibir el id de la carrera seleccionada \n            this.id_carrera_seleccionada = navParams.get('id_carrera');\n            // Recibir toda la informacion de la carrera\n            this.recibir_informacion(this.id_carrera_seleccionada);\n            // Recibir las areas \n            this.recibir_areas();\n    };\n\n    recibir_informacion(id_carrera) {\n        /* recibir_informacion: funcion para recibir toda la informacion de la\n        carrera seleccionada. Llama a la funcion del provider y guarda la info */\n        let token = 'PMinxy-vRxjbj_g3k8mt';\n\n        this.provider_carreras.get_detalle_carrera(id_carrera, token)\n            .then(data => {\n                // Guardar la informacion recibida\n                this.info_carrera = data;\n            })\n    };\n\n    actualizar_carrera() {\n        /* actualizar_carrera: funcion para actualizar la informacion de una de\n        las carreras. Lo que hace es ordenar la data que se enviará y llama a la\n        funcion del provider pasandole la informacion */\n\n        let data_a_enviar = {\n            'area_id': this.info_carrera['area_id'],\n            'title': this.info_carrera['title'],\n            'visits': this.info_carrera['visits'],\n            'semesters': this.info_carrera['semesters'],\n            'price': this.info_carrera['price'],\n            'schedule': this.info_carrera['schedule'],\n            'openings': this.info_carrera['openings'],\n            'employability': this.info_carrera['employability'],\n            'income': this.info_carrera['income'],\n            'last_cut': this.info_carrera['last_cut'],\n            'description': this.info_carrera['description'],\n            weighing: {\n                'NEM': this.info_carrera.weighing['NEM'],\n                'ranking': this.info_carrera.weighing['ranking'],\n                'language': this.info_carrera.weighing['language'],\n                'math': this.info_carrera.weighing['math'],\n                'science': this.info_carrera.weighing['science'],\n                'history': this.info_carrera.weighing['history']\n            }\n        };\n        // Imprimir la info que se enviará a la funcion para actualizar\n        console.log('Data actualizar carrera', data_a_enviar);\n\n        let token = 'PMinxy-vRxjbj_g3k8mt';\n\n        this.provider_carreras.actualizar_carrera(data_a_enviar, this.id_carrera_seleccionada, token)\n            .then(data => {\n                console.log('Respuesta al actualizar', data);\n            })\n    };\n\n    recibir_areas() {\n        /* recibir_areas: funcion para recibir todas las areas. Llama a la funcion\n        del provider y le manda el token */\n\n        let token = 'PMinxy-vRxjbj_g3k8mt';\n\n        this.provider_areas.get_areas(token)\n            .then(data => {\n                // Guardar las areas \n                this.areas = data;\n            })\n    };\n\n    borrar_carrera() {\n        /* borrar_carerra: funcion para borrar la carrera. Primero muestra un alert de \n        confirmacion. Si se acepta se llama a funcion del provider. Si se cancela se\n        borra el alert */\n\n        let confirm = this.alertCtrl.create({\n            title: 'Confirmar eliminar carrera',\n            message: '¿Seguro quieres borras esta carrera? No hay vuelta atrás...',\n            buttons: [\n                {\n                    text: 'Cancelar',\n                    handler: () => {\n                        console.log('Se apretó cancelar');\n                    }\n                },\n                {\n                    text: 'Aceptar',\n                    handler: () => {\n                        console.log('Se apretó para que se borrara una carrera');\n                        let token = 'PMinxy-vRxjbj_g3k8mt';\n                        // Llamar a la funcion del provider \n                        this.provider_carreras.eliminar_carrera(this.id_carrera_seleccionada, token)\n                            .then(data => {\n                                if (data['status'] == 'success') {\n                                    this.navCtrl.pop();\n                                } else {\n                                    alert('Ocurrió un error intentando borrar la carrera')\n                                }\n                            })\n                     }\n                }\n            ]\n        });\n        // Mostrar alert de confirmacion\n        confirm.present();\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/detalle-carrera/detalle-carrera.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams } from 'ionic-angular';\n// Importar providers   \nimport { CampusProvider } from '../../providers/campus/campus';\nimport { DataAreasProvider } from '../../providers/data-areas/data-areas';\nimport { DataCarrerasProvider } from '../../providers/data-carreras/data-carreras';\n\n@Component({\n    selector: 'page-agregar-carrera',\n    templateUrl: 'agregar-carrera.html',\n})\nexport class AgregarCarreraPage {\n    /* AgregarCarreraPage: pagina para agregar una carrera a una \n    universidad en especifico. Recibe por navegacion el id de la universidad\n    y lo guarda. */\n\n    id_universidad: any;\n    info_carrera_nueva: any;\n    campuses_universidad: any;\n    areas:any;\n\n    constructor(\n        public navCtrl: NavController, \n        public navParams: NavParams,\n        public provider_campuses: CampusProvider,\n        public provider_areas: DataAreasProvider,\n        public provider_carreras: DataCarrerasProvider) {\n            // Recibir las areas \n            this.recibir_areas();\n            // Recibir el id de la universidad\n            this.id_universidad = navParams.get('id_universidad');\n            // Recibir los campuses de la universidad\n            this.recibir_campuses(this.id_universidad);\n            // Setear la info de la nueva carrera\n            this.info_carrera_nueva = {'university_id': this.id_universidad, 'weighing':{}};\n    };\n\n    agregar_carrera() {\n        /* agregar_carrera: funcion para enviar toda la informacion a agregar\n        a la funcion del provider. Ordena toda la informacion que se enviará\n        y llama a la función. */\n        let token = 'PMinxy-vRxjbj_g3k8mt';\n\n        console.log('Data a enviar para agregar', this.info_carrera_nueva);\n        this.provider_carreras.agregar_carrera(this.info_carrera_nueva, token)\n            .then(data => {\n                console.log('Respuesta del servidor al agregar carrera', data);\n                if (data) {\n                    this.navCtrl.pop();\n                };\n            });\n    };\n\n    recibir_areas() {\n        /* recibir_areas:funcion funcion para recibir las areas. Llama a la funcion \n        del provider de las areas */\n        let token = 'PMinxy-vRxjbj_g3k8mt';\n\n        this.provider_areas.get_areas(token)\n            .then(data => {\n                // Guardar las areas \n                this.areas = data;\n            });\n    };\n\n    recibir_campuses(id_universidad) {\n        /* recibir_campuses: funcion para recibir la lista con todos los campuses\n        de la universidad. Recibe el id de la universidad y llama a la funcion del provider */\n        let token = 'PMinxy-vRxjbj_g3k8mt';\n\n        this.provider_campuses.get_campuses_universidad(token, id_universidad)\n            .then(data => {\n                this.campuses_universidad = data;\n            });\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/agregar-carrera/agregar-carrera.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams } from 'ionic-angular';\nimport { DataUniversidadesProvider } from '../../providers/data-universidades/data-universidades'\n\n\n@Component({\n  selector: 'page-agregar-universidad',\n  templateUrl: 'agregar-universidad.html',\n})\nexport class AgregarUniversidadPage {\n\n  info_universidad_agregar: object\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public provider_universidades: DataUniversidadesProvider) {\n      this.info_universidad_agregar = {};\n  }\n\n  agregar_universidad() {\n    /* crear_universidad: funcion para crear la informacion de una de \n    lcas universidades. Lo que hace es ordenar la data que se enviará y llama \n    a la funcion del provider */\n    let data_a_enviar = {\n        \"title\": this.info_universidad_agregar['title'],\n        \"website\": this.info_universidad_agregar['website'],\n        \"motto\": this.info_universidad_agregar['motto'],\n        \"initials\": this.info_universidad_agregar['initials'],\n        \"freeness\": this.info_universidad_agregar['freeness'],\n        \"foundation\": this.info_universidad_agregar['foundation'],\n        \"postgraduates\": this.info_universidad_agregar['postgraduates'],\n        \"doctorates\": this.info_universidad_agregar['doctorates'],\n        \"teachers\": this.info_universidad_agregar['teachers'],\n        \"description\": this.info_universidad_agregar['description'],\n        \"students\": this.info_universidad_agregar['students'],\n        \"degrees\": this.info_universidad_agregar['degrees'],\n        \"university_type_id\": 1\n    };\n\n    console.log('Data a enviar', data_a_enviar);\n\n    let token = 'PMinxy-vRxjbj_g3k8mt';\n\n    this.provider_universidades.crear_universidad(data_a_enviar, token)\n        .then(data => {\n            console.log('Respuesta al crear', data);\n        })\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/agregar-universidad/agregar-universidad.ts","import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { LoadingController } from 'ionic-angular';\n\n@Injectable()\nexport class DataUsuariosProvider {\n\n    // Informacion de todos los usuarios\n    info_todos_los_usuarios: any;\n    // Url de la api\n    api: string = 'http://api.admin.tuniversidad.cl/';\n\n    constructor(public http: Http, public loading: LoadingController) {}\n\n    get_todos_los_usuarios(token) {\n        /* get_totos_los_usuarios: funcion para recibir la informacion de todos\n        los usuarios y ponerlos en una tabla. Guarda la info en una variable. */\n        if (this.info_todos_los_usuarios) {\n            return Promise.resolve(this.info_todos_los_usuarios);\n        }\n        // Crear loader \n        let loader = this.loading.create({content: 'Recibiendo información usuarios...'});\n        // Mostrar loader en pantalla\n        loader.present();\n        // Retornar una promesa y guardar la información\n        return new Promise(resolve => {\n            // Headers para la consulta\n            let headers = new Headers();\n            headers.append('token', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la API\n            this.http.get(this.api + '/users', {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    // Guardar la informacion recibida\n                    this.info_todos_los_usuarios = data;\n                    console.log('Informacion de todos los usuarios', data);\n                    // Resolver promesa\n                    resolve(this.info_todos_los_usuarios);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                });\n        }) \n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/data-usuarios/data-usuarios.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { HttpModule } from '@angular/http';\nimport { IonicStorageModule } from '@ionic/storage';\n// Importar paginas\nimport { MyApp } from './app.component';\nimport { HomePage } from '../pages/home/home';\nimport { UsuariosPage } from '../pages/usuarios/usuarios';\nimport { LoginPage } from '../pages/login/login';\nimport { UniversidadesPage } from '../pages/universidades/universidades';\nimport { DetalleUniversidadPage } from '../pages/detalle-universidad/detalle-universidad';\nimport { AgregarUniversidadPage } from '../pages/agregar-universidad/agregar-universidad';\nimport { DetalleCarreraPage } from '../pages/detalle-carrera/detalle-carrera';\nimport { AgregarCarreraPage } from '../pages/agregar-carrera/agregar-carrera';\n// importar providers\nimport { AuthProvider } from '../providers/auth/auth';\nimport { DataUsuariosProvider } from '../providers/data-usuarios/data-usuarios';\nimport { DataUniversidadesProvider } from '../providers/data-universidades/data-universidades';\nimport { DataCarrerasProvider } from '../providers/data-carreras/data-carreras';\nimport { DataAreasProvider } from '../providers/data-areas/data-areas';\nimport { CampusProvider } from '../providers/campus/campus';\n\n@NgModule({\n    declarations: [\n        MyApp,\n        HomePage,\n        UsuariosPage,\n        LoginPage,\n        UniversidadesPage,\n        DetalleUniversidadPage,\n        DetalleCarreraPage,\n        AgregarCarreraPage,\n        AgregarUniversidadPage\n    ],\n    imports: [\n        BrowserModule,\n        HttpModule,\n        IonicModule.forRoot(MyApp),\n        IonicStorageModule.forRoot()\n    ],\n    bootstrap: [IonicApp],\n    entryComponents: [\n        MyApp,\n        HomePage,\n        UsuariosPage,\n        LoginPage,\n        UniversidadesPage,\n        DetalleUniversidadPage,\n        DetalleCarreraPage,\n        AgregarCarreraPage,\n        AgregarUniversidadPage\n    ],\n    providers: [\n        StatusBar,\n        SplashScreen,\n        {provide: ErrorHandler, useClass: IonicErrorHandler},\n        AuthProvider,\n        DataUsuariosProvider,\n        DataUniversidadesProvider,\n        DataCarrerasProvider,\n        DataAreasProvider,\n        CampusProvider\n    ]\n})\nexport class AppModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component, ViewChild } from '@angular/core';\nimport { Nav, Platform } from 'ionic-angular';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\n// Importar paginas\n\nimport { LoginPage } from '../pages/login/login';\nimport { UniversidadesPage } from '../pages/universidades/universidades';\n \n@Component({\n    templateUrl: 'app.html'\n})\n\nexport class MyApp {\n\n    @ViewChild(Nav) nav: Nav;\n    // Pagina Root\n    rootPage:any = LoginPage;\n    // Paginas del menu\n    paginas: any;\n    // Opciones del menu\n    opciones: any;\n\n    constructor(\n        platform: Platform, \n        statusBar: StatusBar, \n        splashScreen: SplashScreen) {\n\n            // Configurar las paginas del menu\n            this.paginas = [\n                { titulo: 'Universidades', component: UniversidadesPage, icon: 'paper' }\n            ]\n            // Cuando está lista la plataforma\n            platform.ready().then(() => {\n                statusBar.styleDefault();\n                splashScreen.hide();\n            });\n    }\n\n    abrir_pagina(page) {\n        /* abrir_pagina: Al apretar un item del menu se abre una pagina. Setea la pagina\n        root a la del componente clickeado */\n        this.nav.setRoot(page.component)\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams } from 'ionic-angular';\n// Importar providers\nimport { DataUsuariosProvider } from '../../providers/data-usuarios/data-usuarios';\n\n@Component({\n    selector: 'page-usuarios',\n    templateUrl: 'usuarios.html',\n})\n\nexport class UsuariosPage {\n    /* UsuariosPage: pagina para mostrar toda la información de los usuarios. Al\n    abrir el componente se llama a la funcion del provider y carga toda la info. */\n\n    // Usuarios con Rut \n    cantidad_usuarios_con_rut: number;\n    // Usuarios sin Rut \n    cantidad_usuarios_sin_rut: number;\n    // Usuarios con metas \n    cantidad_usuarios_con_metas: number;\n    promedio_metas_por_usuarios: number;\n    // Usuarios con ensayos\n    cantidad_usuarios_con_ensayos: number;\n    promedio_ensayos_por_usuario: number;\n    // Regiones\n    region_mas_repetida:string;\n    cantidad_usuarios_region: number;\n\n    constructor(\n        public navCtrl: NavController, \n        public navParams: NavParams,\n        private provider_usuarios: DataUsuariosProvider) {\n            // Al iniciar se abre la info de los usuarios\n            this.recibir_todos_usuarios();\n    }\n\n    recibir_todos_usuarios() {\n        /* recibir_todos_usuarios: funcion para recibir la informacion basica de todos los\n        usuarios. Usa la funcion del provider y guarda lo retornado */\n\n        let token = 'fqH6AyiyhQMeqKM8MjMC';\n\n        this.provider_usuarios.get_todos_los_usuarios(token)\n            .then(data => {\n                // Guardar info de usuarios con Rut \n                this.cantidad_usuarios_con_rut = data[0][0];\n                // Guardar cantidad usuarios sin rut \n                this.cantidad_usuarios_sin_rut = data[0][1];\n                // Guardar info de las metas \n                this.cantidad_usuarios_con_metas = data[1][0];\n                this.promedio_metas_por_usuarios = data[1][1];\n                // Guardar info de ensayos\n                this.cantidad_usuarios_con_ensayos = data[2][0];\n                this.promedio_ensayos_por_usuario = data[2][1];\n                // Guardar informacion de la region mas repetida \n                this.region_mas_repetida = data[3][0];\n                this.cantidad_usuarios_region = data[3][1];\n            })\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/usuarios/usuarios.ts","import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { LoadingController } from 'ionic-angular';\n\n@Injectable()\nexport class DataUniversidadesProvider {\n    /* DataUniversidadesProvider: provider de la información de las universidades.\n    Tiene todas las funciones necesarias para manejar la info. */\n\n    // Url de la api\n    api: string = 'http://localhost:3000';\n    // Info de todas las universidades\n    info_todas_las_universidades: any;\n\n    constructor(public http: Http, public loading: LoadingController) {}\n\n    get_todas_universidades(token) {\n        /* get_todas_universidades: funcion para recibir la informacion basica de todas\n        las universidades. Guarda esta info en una variable. */\n        if (this.info_todas_las_universidades) {\n            return Promise.resolve(this.info_todas_las_universidades);\n        }\n        // Crear loader \n        let loader = this.loading.create({content: 'Recibiendo universidades...'});\n        // Mostrar loader \n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la api\n            this.http.get(this.api + '/universities', {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    // Guardar la información de las universidades \n                    this.info_todas_las_universidades = data;\n                    console.log('Informacion de las universidades', data);\n                    // Resolver promesa\n                    resolve(this.info_todas_las_universidades);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                });\n        })\n    }\n\n    get_detalle_universidad(id_universidad, token) {\n        /* get_detalle_universidad: funcion para recibir la información detallada de una \n        universidad. Recibe un token y el id de la universidad a consultar */\n\n        // Crear loader \n        let loader = this.loading.create({content: 'Recibiendo detalle...'});\n        // Mostrar loader en pantalla\n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la API \n            this.http.get(this.api + '/universities/' + id_universidad, {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Información de la universidad', data);\n                    // Resolver promesa\n                    resolve(data);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                })\n        })\n    }\n\n    get_carreras_universidad(id_universidad,token) {\n        let loader = this.loading.create({content: 'Recibiendo carreras...'});\n        // Mostrar loader en pantalla\n        loader.present();\n        return new Promise(resolve => {\n            // Headers para hacer la consulta\n            let headers = new Headers();\n            headers.append('Authorization', token);\n            headers.append('Content-Type', 'application/json');\n            // Hacer get a la API \n            this.http.get(this.api + '/universities/' + id_universidad + '/carreers', {headers: headers})\n                .map(res => res.json())\n                .subscribe(data => {\n                    console.log('Información de las carreras', data);\n                    // Resolver promesa\n                    resolve(data);\n                    // Desaparece loader de la pantalla\n                    loader.dismiss();\n                })\n        })\n    }\n\n    actualizar_universidad(data_universidad, id_universidad, token) {\n        /* actualizar_universidad: funcion para actualizar la informacion de una universidad\n        lo que hace es recibir un json con toda la información de la universidad y la manda */\n    \n       let loader = this.loading.create({ content: 'Actualizando universidad...' });\n       // Mostrar loader\n       loader.present();\n       return new Promise(resolve => {\n           // Headers para hacer la consulta\n           let headers = new Headers();\n           console.log(token)\n           headers.append('Authorization', token);\n           headers.append('Content-Type', 'application/json');\n           // Hacer patch a la API\n           this.http.patch(this.api + '/universities/' + id_universidad, JSON.stringify(data_universidad), { headers: headers })\n               .map(res => res.json())\n               .subscribe(data => {\n                   resolve(data);\n                   loader.dismiss();\n               })\n       })\n    }\n\n    crear_universidad(data_universidad,token) {\n        let loader = this.loading.create({ content: 'Actualizando universidad...' });\n       // Mostrar loader\n       loader.present();\n       return new Promise(resolve => {\n           // Headers para hacer la consulta\n           let headers = new Headers();\n           console.log(token)\n           headers.append('Authorization', token);\n           headers.append('Content-Type', 'application/json');\n           // Hacer post a la API\n           this.http.post(this.api + '/universities/', JSON.stringify(data_universidad), { headers: headers })\n               .map(res => res.json())\n               .subscribe(data => {\n                   resolve(data);\n                   loader.dismiss();\n               })\n       })\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/data-universidades/data-universidades.ts"],"sourceRoot":""}